#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass beamer
\begin_preamble
\definecolor{lightgrey}{rgb}{0.9,0.9,0.9}
% We use the "Berkeley" theme with a 3.45em-wide side bar on the left
%\usetheme[left,width=3.45em]{Berkeley}
%\usetheme{Warsaw}
% or ...
%\usetheme{Antibes}	% tree outline, neat
%\usetheme{JuanLesPins}	% like Antibes, with shading
%\usetheme{Bergen}	% outline on side
%\usetheme{Luebeck}	% like Warsaw, square sides
%\usetheme{Berkeley}	% interesting left bar outline
\usetheme{Madrid}	% clean, nice.  7/12 page numbers
%\usetheme{Berlin}	% dots show slide number
%\usetheme{Malmoe}	% OK, plain, unshaded
%\usetheme{Boadilla}	% nice, white bg, no top bar
%\usetheme{Marburg}	% nice, outline on right
%\usetheme{boxes}	% ???
%\usetheme{Montpellier}	% tree outline on top, plainish white
%\usetheme{Copenhagen}	% like Warsaw
%\usetheme{PaloAlto}	% looks good
%\usetheme{Darmstadt}	% like Warsaw with circle outline
%\usetheme{Pittsburgh}
%\usetheme{default}
%\usetheme{Rochester}	% like boxy, unshaded warsaw
%\usetheme{Dresden}	% circle outline on top
%\usetheme{Singapore}	% purple gradient top
%\usetheme{Frankfurt}	% like Warsaw with circle outline on top
%\usetheme{Szeged}
%\usetheme{Goettingen}	% light purple right bar outline
%\usetheme{Warsaw}
%\usetheme{Hannover}	% like Goett with bar on left
%\usetheme{compatibility}
%\usetheme{Ilmenau}


\usecolortheme{seahorse}
%\usecolortheme{fly}
\end_preamble
\use_default_options true
\begin_modules
theorems-starred
knitr
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 1
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
SQL Tutorial
\end_layout

\begin_layout Subtitle
A Brief Introduction
\end_layout

\begin_layout Author
Darrell Aucoin
\end_layout

\begin_layout Institute
Stats Club
\end_layout

\begin_layout TitleGraphic
\begin_inset Graphics
	filename Images/exploits_of_a_mom.png
	scale 40

\end_inset


\end_layout

\begin_layout Frame

\end_layout

\begin_deeper
\begin_layout FrameTitle
\begin_inset Argument 1
status open

\begin_layout Plain Layout
presentation
\end_layout

\end_inset

Contents
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\end_deeper
\begin_layout Section
What is SQL?
\end_layout

\begin_layout Frame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
What Do We Want to Do With Data?
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Important
\end_layout

\end_inset

 Data proccessing/manipulation should only be done after we formulate a
 question and find relavant data to our question.
\end_layout

\begin_layout Description
Filter
\begin_inset space ~
\end_inset

Data: Filter out entities not relavant to our question.
\end_layout

\begin_deeper
\begin_layout Itemize
WHERE/HAVING clause in SQL
\end_layout

\end_deeper
\begin_layout Description
Select
\begin_inset space ~
\end_inset

Attributes: Narrow down on attributes of interest on the entities we want
 to examine.
\end_layout

\begin_deeper
\begin_layout Itemize
SELECT clause in SQL
\end_layout

\end_deeper
\begin_layout Description
Manipulate
\begin_inset space ~
\end_inset

Variables: Do calculations, concatonate strings, change variables to different
 datatypes.
\end_layout

\begin_deeper
\begin_layout Itemize
Done with various functions in SQL
\end_layout

\end_deeper
\begin_layout Description
Summarise
\begin_inset space ~
\end_inset

Values: Perform counts, sums, averages, etc.
 on your data.
\end_layout

\begin_deeper
\begin_layout Itemize
Aggregate functions associated with GROUP BY clause in SQL
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
What Do We Want to Do With Data?
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Description
Combine
\begin_inset space ~
\end_inset

Information: Piece information together from other sources
\end_layout

\begin_deeper
\begin_layout Itemize
JOIN clauses in SQL, joining two tables together
\end_layout

\end_deeper
\begin_layout Description
Arrange
\begin_inset space ~
\end_inset

Data: Sort our data to help identify patterns
\end_layout

\begin_deeper
\begin_layout Itemize
ORDER BY clause in SQL
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Relational Databases
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Definition

\series bold
Relational Database
\series default
: A relational database is a system organized in tables containing entities
 (rows) related to other entries in other tables.
 Each entity having attributes (columns also called fields) which give additiona
l information on an entity.
 
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename Images/RelationalDatabase2.pdf
	scale 60

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame

\end_layout

\begin_layout Frame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Relational Databases
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename Images/StatClubTables.pdf
	scale 80

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
The SQL Language
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
SQL is a non-procedural language, meaning the order of execution of clauses
 is not determined by the SQL language but rather the programmer specifies
 what needs to be done and is sent to an optimizer which handles how to
 do the task.
\end_layout

\begin_layout Standard
SQL is made of sub-languages:
\end_layout

\begin_layout Enumerate
Data Manipulation Language
\end_layout

\begin_deeper
\begin_layout Description
SELECT Statements that perform queries
\end_layout

\begin_layout Description
INSERT,
\begin_inset space ~
\end_inset

UPDATE,
\begin_inset space ~
\end_inset

DELETE Statements that modify the instance of a table
\end_layout

\end_deeper
\begin_layout Enumerate
Data Definition Language
\end_layout

\begin_deeper
\begin_layout Description
CREATE,
\begin_inset space ~
\end_inset

DROP,
\begin_inset space ~
\end_inset

ALTER Statements that modify the database schema
\end_layout

\end_deeper
\begin_layout Enumerate
Data Control Language
\end_layout

\begin_deeper
\begin_layout Description
GRANT,
\begin_inset space ~
\end_inset

REVOKE Statements that enforce the security model
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Conventions
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
For the purposes of this talk:
\end_layout

\begin_layout Itemize
SQL commands are in UPPER CASE, SQL in general is not case sensitive
\end_layout

\begin_deeper
\begin_layout Description
<> will display tables name, variables names, variable types
\end_layout

\begin_layout Description
[] will mean optional arguments
\end_layout

\begin_layout Description
...
 will just mean additional code
\end_layout

\end_deeper
\begin_layout Itemize
Note on SQL Coding
\end_layout

\begin_layout Description
; ends a command, a command is interpreted as a whole and only executed
 after it reads the ;
\end_layout

\begin_deeper
\begin_layout Itemize
The uses of the newline is only for readability purposes.
\end_layout

\end_deeper
\begin_layout Description
/*
\begin_inset space ~
\end_inset

...
\begin_inset space ~
\end_inset

*/ Programming comments (in most SQL implementations).
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
plain
\end_layout

\end_inset


\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},breaklines=true"
inline false
status open

\begin_layout Plain Layout

mysql> SELECT name, position
\end_layout

\begin_layout Plain Layout

    -> FROM exec;
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\begin_inset listings
lstparams "basicstyle={\footnotesize},breaklines=true"
inline false
status open

\begin_layout Plain Layout

+-------------------------+----------------+
\end_layout

\begin_layout Plain Layout

| name                    | position       |
\end_layout

\begin_layout Plain Layout

+-------------------------+----------------+
\end_layout

\begin_layout Plain Layout

| Ajanthan Thavaraja (Aj) | Events         |
\end_layout

\begin_layout Plain Layout

| Darrell Aucoin          | President      |
\end_layout

\begin_layout Plain Layout

| JinCheng Wong           | Events         |
\end_layout

\begin_layout Plain Layout

| Massey Cashore          | Events         |
\end_layout

\begin_layout Plain Layout

| Jacob Burns             | President      |
\end_layout

\begin_layout Plain Layout

| Ming Pan                | Technology     |
\end_layout

\begin_layout Plain Layout

| Zixin Nie               | Events         |
\end_layout

\begin_layout Plain Layout

| Simon wang              | Senior Advisor |
\end_layout

\begin_layout Plain Layout

| Alice Wang              | Finance        |
\end_layout

\begin_layout Plain Layout

+-------------------------+----------------+
\end_layout

\begin_layout Plain Layout

9 rows in set (0.00 sec)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Definitions
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Description
Entity Something of interest in the data base: a person, account, etc.
\end_layout

\begin_layout Description
Column
\begin_inset space ~
\end_inset

(Attribute,
\begin_inset space ~
\end_inset

Field) An individual piece of data stored in a table
\end_layout

\begin_layout Description
Row
\begin_inset space ~
\end_inset

(Record) A tuple of columns describing an entity or action of an entity.
\end_layout

\begin_layout Description
Table A collection of rows.
\end_layout

\begin_deeper
\begin_layout Itemize
Usually in reference a persistent saved permanently to memory
\end_layout

\begin_layout Description
Result
\begin_inset space ~
\end_inset

set A non-persistent table, usually the result of a query.
\end_layout

\begin_layout Description
Subquery A query that returns a table to another query.
\end_layout

\begin_layout Description
(Virtual)
\begin_inset space ~
\end_inset

View A named query saved into memory performed whenever it is named.
 Some SQL servers have materialized views that permanently save the data
 for faster access.
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Definitions
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Description
Primary
\begin_inset space ~
\end_inset

key A tuple of columns that uniquely define each row in a table.
\end_layout

\begin_layout Description
Foreign
\begin_inset space ~
\end_inset

key A tuple of columns identifying a relationship to another table.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Important Information on SQL
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Additional information:
\end_layout

\begin_layout Itemize
SQL is designed with the relational model (see: relational algebra) in mind
\end_layout

\begin_layout Itemize
SQL is 
\series bold
normalized
\series default
: Tables contain only primative data types: strings, numbers, dates, etc.
\end_layout

\begin_deeper
\begin_layout Itemize
A table cannot contain a relation or another table as an attribute (the
 table is 'flat')
\end_layout

\end_deeper
\begin_layout Itemize
A good database is designed so that there is no redundency in data:
\end_layout

\begin_deeper
\begin_layout Itemize
A specific piece of data for a specific entity is only ever in one place
 in one table (unless it's a key)
\end_layout

\end_deeper
\begin_layout Itemize
Relationships in SQL can be described as:
\end_layout

\begin_deeper
\begin_layout Enumerate

\series bold
One to one relationships
\series default
: A student has one mailing address
\end_layout

\begin_layout Enumerate

\series bold
One to many relationships
\series default
: A student takes many courses per term
\end_layout

\begin_layout Enumerate

\series bold
Many to one relationships
\series default
: A course section has many students
\end_layout

\begin_layout Enumerate

\series bold
Many to many relationships
\series default
: A University has many students and students may have many Universities
 (Waterloo and Laurier)
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Different Implementations of SQL
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Description
MySQL: Highly popular open source SQL implementation.
 Most of the examples here use MySQL.
\end_layout

\begin_layout Description
PostgreSQL: Open source SQL designed around letting users create User Defined
 Functions (UDF).
\end_layout

\begin_layout Description
SQLite: Open sources light weight SQL usually used as an embedded database
 for applications (web browsers, mobile applications, etc.), or light to
 medium traffic websites.
 Database is saved as a single file making it a good alternative to csv
 for sharing data.
 Various OS's have SQLite preinstalled (type sqlite3 in terminal for mac)
\end_layout

\begin_layout Description
Oracle: SQL implementation produced and marketed by Oracle Corporation.
\end_layout

\begin_layout Description
Microsoft
\begin_inset space ~
\end_inset

SQL
\begin_inset space ~
\end_inset

Server: SQL implementation developed by Microsoft.
\end_layout

\begin_layout Description
DB2: SQL developed by IBM.
 The database used by University of Waterloo.
\end_layout

\begin_layout Itemize
Each implementation of SQL is slightly different
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Section
Relational Algebra
\end_layout

\begin_layout Frame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Basics of Relational Algebra
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
SQL uses what is called 
\series bold
Relational Algrebra
\series default
: a set of operations on tables that in turn returns a table.
 This is analogous to regular algebra where we take in a number perform
 an operation and then return a number.
 
\end_layout

\begin_layout Itemize
This homogeneity is the critical aspect to the power of relational databases
 and SQL
\end_layout

\begin_layout Pause
First the data is normalized: removing redundant data and repeating groups
 of data, then a set of relational algebra operations can be applied.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Relational Algebra Operations
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Description
Projection
\begin_inset space ~
\end_inset

(
\begin_inset Formula $\pi$
\end_inset

): Returns a subset of columns.
\end_layout

\begin_layout Description
Selection
\begin_inset space ~
\end_inset

(
\begin_inset Formula $\sigma$
\end_inset

): Returns only entities where some condition is true.
\end_layout

\begin_layout Description
Rename
\begin_inset space ~
\end_inset

(
\begin_inset Formula $\rho$
\end_inset

): Rename an attribute.
\end_layout

\begin_layout Description
Natural
\begin_inset space ~
\end_inset

Join
\begin_inset space ~
\end_inset

(
\begin_inset Formula $\bowtie$
\end_inset

): Tuples from one table is joined to tuples from another table based on
 common attributes (at least one column with the same name and possible
 values is common between them)
\end_layout

\begin_layout Description
\begin_inset Formula $\theta$
\end_inset

-Join
\begin_inset space ~
\end_inset

and
\begin_inset space ~
\end_inset

Equijoin: Join tuples from two different tables where some binary condition
 (
\begin_inset Formula $\theta=\left\{ \ge,\le,<,>,=\right\} $
\end_inset

) between two tables attributes is true.
 When 
\begin_inset Formula $\theta$
\end_inset

 is =, the join is called an equijoin.
\end_layout

\begin_layout Description
Set
\begin_inset space ~
\end_inset

Operations: Set theory's unions, set difference, and carestian product of
 tuples performed on tuples of different tables.
\end_layout

\begin_layout Description
\begin_inset Formula $\vdots$
\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Power of the Relational Model
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
These relational algebra operations can be rearranged much like regular
 algebra (distributive law, communative law ect.).
 The SQL optimization engine finds various combinations of these operations
 via the relational algebra model and selects the combination that (usually)
 has the lowest computational cost.
\end_layout

\begin_layout Itemize
SQL optimization engine allows the user to simply define their question
 and not have to worry (too much) about performance
\end_layout

\begin_layout Itemize
This homogeneity of operations not only allow powerful chains of operations
 to occur, but allows the user to perform queries that even relational algebra's
 creator Edgar F.
 Codd could not think of.
 
\end_layout

\begin_deeper
\begin_layout Itemize
Queries performing linear regression, and even Monte Carlo simulations are
 possible using SQL
\end_layout

\begin_layout Itemize
It is usually better to get SQL to do these operations on the server
\end_layout

\begin_layout Itemize
Queries in practice can get to be 100+ lines
\end_layout

\end_deeper
\begin_layout Itemize
Relational Algebra uses set notation but SQL uses bag semantics
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Section
Clauses
\end_layout

\begin_layout Subsection
Data Definition
\end_layout

\begin_layout FragileFrame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Data Definition: SELECT
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Definition

\series bold
SELECT Statement
\series default
: The SELECT statement returns a table of values (sometimes empty) as specified
 in the statement.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "backgroundcolor={\color{lightgrey}}"
inline false
status open

\begin_layout Plain Layout

SELECT <listOfColumn(s)>
\end_layout

\begin_layout Plain Layout

FROM <table>
\end_layout

\begin_layout Plain Layout

[WHERE <condition>];
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Use * instead of <listOfColumn(s)> if you wish to return all columns
\end_layout

\begin_layout Itemize
We can also use expressions and functions in <listOfColumn(s)> to return
 values based on the resultant of each row.
\end_layout

\begin_deeper
\begin_layout Itemize
Aggregate functions, on the other hand, take in many entries (sometimes
 grouped) and return a value per group
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
plain
\end_layout

\end_inset


\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
SELECT Example
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\tiny},breaklines=true"
inline false
status open

\begin_layout Plain Layout

mysql> SELECT name, start_time, location
\end_layout

\begin_layout Plain Layout

    -> FROM event;
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\noindent
\begin_inset listings
lstparams "basicstyle={\tiny},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

+-----------------+---------------------+----------+
\end_layout

\begin_layout Plain Layout

| name            | start_time          | location |
\end_layout

\begin_layout Plain Layout

+-----------------+---------------------+----------+
\end_layout

\begin_layout Plain Layout

| BOT             | 2014-09-23 18:00:00 | MC Comfy |
\end_layout

\begin_layout Plain Layout

| EOT             | NULL                | NULL     |
\end_layout

\begin_layout Plain Layout

| Intro to Hadoop | NULL                | NULL     |
\end_layout

\begin_layout Plain Layout

| Intro to Pig    | NULL                | NULL     |
\end_layout

\begin_layout Plain Layout

| Intro to SQL    | 2014-10-16 17:30:00 | M3-3103  |
\end_layout

\begin_layout Plain Layout

| Prof Talk       | 2014-10-23 15:00:00 | MC 1085  |
\end_layout

\begin_layout Plain Layout

| R Tutorial      | NULL                | NULL     | 
\end_layout

\begin_layout Plain Layout

+-----------------+---------------------+----------+ 
\end_layout

\begin_layout Plain Layout

7 rows in set (0.00 sec)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Usual Execution Order of SELECT Statement
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
The 
\series bold
usual
\series default
 order of execution of a SELECT statement:
\end_layout

\begin_layout Enumerate

\series bold
FROM
\series default
: Identifies what table to retrieve the data from
\end_layout

\begin_layout Enumerate

\series bold
ON
\series default
: (used with FROM) Describes how to join tables
\end_layout

\begin_layout Enumerate

\series bold
OUTER
\series default
: Related to JOIN 
\end_layout

\begin_layout Enumerate

\series bold
WHERE
\series default
: A filter clause
\end_layout

\begin_layout Enumerate

\series bold
GROUP BY
\series default
: Group the data by one or more attributes (columns)
\end_layout

\begin_layout Enumerate

\series bold
ROLLUP
\series default
 | 
\series bold
CUBE 
\end_layout

\begin_layout Enumerate

\series bold
HAVING
\series default
: A filter clause, usually related to the GROUP BY clause, allowing aggregate
 functions in the filter clause
\end_layout

\begin_layout Enumerate

\series bold
SELECT 
\end_layout

\begin_layout Enumerate

\series bold
DISTINCT
\series default
: Ensures only distinct values are returned
\end_layout

\begin_layout Enumerate

\series bold
ORDER BY
\series default
: Order the rows by ascending or descending on the tuple of the columns
 given
\end_layout

\begin_layout Enumerate

\series bold
LIMIT
\series default
 | 
\series bold
TOP
\series default
: Display only a specified number of rows
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
The SELECT Clause
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
In SELECT clauses, we can specify more than just columns:
\end_layout

\begin_layout Description
Literials Strings, numbers
\end_layout

\begin_layout Description
Expressions Expressions of columns/literals
\end_layout

\begin_layout Description
Functions Built in functions in SQL (ROUND(), etc.)
\end_layout

\begin_layout Description
User
\begin_inset space ~
\end_inset

Defined
\begin_inset space ~
\end_inset

Functions Functions that a user can create within SQL to run
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

mysql> SELECT 'str', num, num/4, ROUND(num, 2)
\end_layout

\begin_layout Plain Layout

    -> FROM exampletable; 
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\begin_inset listings
lstparams "basicstyle={\footnotesize},breaklines=true,language=SQL"
inline false
status open

\begin_layout Plain Layout

+-----+--------+--------------------+---------------+
\end_layout

\begin_layout Plain Layout

| str | num    | num/4              | ROUND(num, 2) |
\end_layout

\begin_layout Plain Layout

+-----+--------+--------------------+---------------+
\end_layout

\begin_layout Plain Layout

| str |      1 |               0.25 |          1.00 |
\end_layout

\begin_layout Plain Layout

| str |   3.14 | 0.7850000262260437 |          3.14 |
\end_layout

\begin_layout Plain Layout

| str | 8.2223 |  2.055574893951416 |          8.22 |
\end_layout

\begin_layout Plain Layout

+-----+--------+--------------------+---------------+
\end_layout

\begin_layout Plain Layout

3 rows in set (0.00 sec)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Using DISTINCT within SELECT Clause
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
In the SELECT clause we can specify to return only distinct tuples of columns
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "backgroundcolor={\color{lightgrey}},breaklines=true,language=SQL"
inline false
status open

\begin_layout Plain Layout

SELECT DISTINCT <list of col>
\end_layout

\begin_layout Plain Layout

FROM <table/joinedTables/subquery/view>
\end_layout

\begin_layout Plain Layout

...;
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\begin_inset listings
lstparams "basicstyle={\footnotesize},breaklines=true,language=SQL"
inline false
status open

\begin_layout Plain Layout

mysql> SELECT DISTINCT title
\end_layout

\begin_layout Plain Layout

    -> FROM employee;
\end_layout

\begin_layout Plain Layout

+--------------------+
\end_layout

\begin_layout Plain Layout

| title              |
\end_layout

\begin_layout Plain Layout

+--------------------+
\end_layout

\begin_layout Plain Layout

| President          |
\end_layout

\begin_layout Plain Layout

| Vice President     |
\end_layout

\begin_layout Plain Layout

| Treasurer          |
\end_layout

\begin_layout Plain Layout

| Operations Manager |
\end_layout

\begin_layout Plain Layout

| Loan Manager       |
\end_layout

\begin_layout Plain Layout

| Head Teller        |
\end_layout

\begin_layout Plain Layout

| Teller             |
\end_layout

\begin_layout Plain Layout

+--------------------+
\end_layout

\begin_layout Plain Layout

7 rows in set (0.00 sec)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Column Alias
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
To increase the readability of SQL, as well as give better explanation of
 what aliases are commonly used:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

mysql> SELECT COUNT(*) AS Club_Size
\end_layout

\begin_layout Plain Layout

    -> FROM member;
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\begin_inset listings
lstparams "basicstyle={\footnotesize},breaklines=true,language=SQL"
inline false
status open

\begin_layout Plain Layout

+-----------+
\end_layout

\begin_layout Plain Layout

| Club_Size |
\end_layout

\begin_layout Plain Layout

+-----------+
\end_layout

\begin_layout Plain Layout

|        29 |
\end_layout

\begin_layout Plain Layout

+-----------+
\end_layout

\begin_layout Plain Layout

1 row in set (0.00 sec)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Table Alias
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Table aliases are also sued: often for queries using subqueries or multiple
 tables.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "backgroundcolor={\color{lightgrey}}"
inline false
status open

\begin_layout Plain Layout

SELECT <table1>.<col1>, ..., <table2>.<col1>, ...
\end_layout

\begin_layout Plain Layout

FROM <using various tables>
\end_layout

\begin_layout Plain Layout

[WHERE <condition>];
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Table Alias Example
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\tiny}"
inline false
status open

\begin_layout Plain Layout

mysql> SELECT e.name AS Name, e.position AS Position, p.duties AS Duties
\end_layout

\begin_layout Plain Layout

    -> FROM exec AS e JOIN exec_position AS p ON e.position = p.position;
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\begin_inset listings
lstparams "basicstyle={\tiny},language=SQL"
inline false
status open

\begin_layout Plain Layout

+-------------------------+----------------+------------------------------------
--------------------------------------------------------------------------------
-----------------------------------------------------------+
\end_layout

\begin_layout Plain Layout

| Name                    | Position       | Duties                    
                                                                       
                   
\end_layout

\begin_layout Plain Layout

+-------------------------+----------------+------------------------------------
--------------------------------------------------------------------------------
-----------------------------------------------------------+
\end_layout

\begin_layout Plain Layout

| Ajanthan Thavaraja (Aj) | Events         | To assist the president and
 other vice-presidents in administrative duties and events.
                              
\end_layout

\begin_layout Plain Layout

| Ajanthan Thavaraja (Aj) | Events         | To chair the organization and
 promotion of least one event per semester, and ensure its success.
                    
\end_layout

\begin_layout Plain Layout

| Darrell Aucoin          | President      | To be aware of MathSocs Policies
 and Bylaws in regards to the clubs management and activities.
                      
\end_layout

\begin_layout Plain Layout

| Darrell Aucoin          | President      | To call and preside over general
 meetings.
                                                                       
   
\end_layout

\begin_layout Plain Layout

| Darrell Aucoin          | President      | To manage the executive team
 and the strategic direction of the club.
                                               
\end_layout

\begin_layout Plain Layout

| Darrell Aucoin          | President      | To post announcements of all
 club meetings, and to send notice of the same to MathSocs President and
 MathSocs Director of Internal Affairs
\end_layout

\begin_layout Plain Layout

| JinCheng Wong           | Events         | To assist the president and
 other vice-presidents in administrative duties and events.
                              
\end_layout

\begin_layout Plain Layout

| JinCheng Wong           | Events         | To chair the organization and
 promotion of least one event per semester, and ensure its success.
                    
\end_layout

\begin_layout Plain Layout

| Massey Cashore          | Events         | To assist the president and
 other vice-presidents in administrative duties and events.
                              
\end_layout

\begin_layout Plain Layout

| Massey Cashore          | Events         | To chair the organization and
 promotion of least one event per semester, and ensure its success.
                    
\end_layout

\begin_layout Plain Layout

| Jacob Burns             | President      | To be aware of MathSocs Policies
 and Bylaws in regards to the clubs management and activities.
                      
\end_layout

\begin_layout Plain Layout

| Jacob Burns             | President      | To call and preside over general
 meetings.
                                                                       
   
\end_layout

\begin_layout Plain Layout

| Jacob Burns             | President      | To manage the executive team
 and the strategic direction of the club.
                                               
\end_layout

\begin_layout Plain Layout

| Jacob Burns             | President      | To post announcements of all
 club meetings, and to send notice of the same to MathSocs President and
 MathSocs Director of Internal Affairs
\end_layout

\begin_layout Plain Layout

| Ming Pan                | Technology     | Maintain and update the club
 website.
                                                                       
        
\end_layout

\begin_layout Plain Layout

| Ming Pan                | Technology     | Maintain any hardware, software,
 or technology the club may possess.
                                                
\end_layout

\begin_layout Plain Layout

| Ming Pan                | Technology     | Perform the duties of a Vice
 President - Events if possible.
                                                        
\end_layout

\begin_layout Plain Layout

| Zixin Nie               | Events         | To assist the president and
 other vice-presidents in administrative duties and events.
                              
\end_layout

\begin_layout Plain Layout

| Zixin Nie               | Events         | To chair the organization and
 promotion of least one event per semester, and ensure its success.
                    
\end_layout

\begin_layout Plain Layout

| Simon wang              | Senior Advisor | Have previous club management
 experience in order to advise the president and executive team on club
 matters.
       
\end_layout

\begin_layout Plain Layout

| Simon wang              | Senior Advisor | To be aware of MathSoc's Policies
 and Bylaws in regards to the club's management and activities.
                    
\end_layout

\begin_layout Plain Layout

| Alice Wang              | Finance        | To ensure membership fees are
 collected and maintain a list of all past and current members.
                        
\end_layout

\begin_layout Plain Layout

| Alice Wang              | Finance        | To keep an up-to-date record
 of financial transactions and the purpose of expenditures, and to present
 this record to any club member or MathSoc Council member upon request.
 |
\end_layout

\begin_layout Plain Layout

| Alice Wang              | Finance        | To prepare a summary of the
 financial records at the end of the academic term.
                                      
\end_layout

\begin_layout Plain Layout

| Alice Wang              | Finance        | To prepare the budget at the
 beginning of term.
                                                                     
\end_layout

\begin_layout Plain Layout

| Alice Wang              | Finance        | To volunteer as president in
 the absence of the president.
                                                          
\end_layout

\begin_layout Plain Layout

+-------------------------+----------------+------------------------------------
--------------------------------------------------------------------------------
-----------------------------------------------------------+
\end_layout

\begin_layout Plain Layout

26 rows in set (0.00 sec)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Data Definition: INSERT
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Definition

\series bold
INSERT Statement
\series default
: The INSERT statement inserts a row entry into a table.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "backgroundcolor={\color{lightgrey}},breaklines=true,language=SQL"
inline false
status open

\begin_layout Plain Layout

INSERT INTO <table> (<variableName1>, <variableName2>)
\end_layout

\begin_layout Plain Layout

VALUES (<variable1>, <variable2>);
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
plain
\end_layout

\end_inset


\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
INSERT Example
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\tiny},breaklines=true"
inline false
status open

\begin_layout Plain Layout

mysql> INSERT INTO branch (name, address, city, state, zip) 
\end_layout

\begin_layout Plain Layout

    -> VALUES ('some branch', 'some address', 'city', 'ST', 90210); 
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\noindent
\begin_inset listings
lstparams "basicstyle={\tiny},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

Query OK, 1 row affected (0.00 sec)
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\noindent
\begin_inset listings
lstparams "basicstyle={\tiny},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

mysql> SELECT * FROM branch; 
\end_layout

\begin_layout Plain Layout

+-----------+---------------+----------------------+---------+-------+-------+
 
\end_layout

\begin_layout Plain Layout

| branch_id | name          | address              | city    | state | zip
   | 
\end_layout

\begin_layout Plain Layout

+-----------+---------------+----------------------+---------+-------+-------+
 
\end_layout

\begin_layout Plain Layout

|         1 | Headquarters  | 3882 Main St.
        | Waltham | MA    | 02451 | 
\end_layout

\begin_layout Plain Layout

|         2 | Woburn Branch | 422 Maple St.
        | Woburn  | MA    | 01801 | 
\end_layout

\begin_layout Plain Layout

|         3 | Quincy Branch | 125 Presidential Way | Quincy  | MA    | 02169
 | 
\end_layout

\begin_layout Plain Layout

|         4 | So.
 NH Branch | 378 Maynard Ln.
      | Salem   | NH    | 03079 | 
\end_layout

\begin_layout Plain Layout

|         5 | Headquarters  | 3882 Main St.
        | Waltham | MA    | 02451 | 
\end_layout

\begin_layout Plain Layout

|         6 | Woburn Branch | 422 Maple St.
        | Woburn  | MA    | 01801 | 
\end_layout

\begin_layout Plain Layout

|         7 | Quincy Branch | 125 Presidential Way | Quincy  | MA    | 02169
 | 
\end_layout

\begin_layout Plain Layout

|         8 | So.
 NH Branch | 378 Maynard Ln.
      | Salem   | NH    | 03079 | 
\end_layout

\begin_layout Plain Layout

|         9 | some branch   | some address         | city    | ST    | 90210
 | 
\end_layout

\begin_layout Plain Layout

+-----------+---------------+----------------------+---------+-------+-------+
 
\end_layout

\begin_layout Plain Layout

9 rows in set (0.00 sec)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Data Definition: UPDATE
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Definition

\series bold
UPDATE Statement
\series default
: The UPDATE statement changes entries in 0 or more rows.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "backgroundcolor={\color{lightgrey}},breaklines=true,language=SQL"
inline false
status open

\begin_layout Plain Layout

UPDATE <table>
\end_layout

\begin_layout Plain Layout

SET <variableName1> = <value1>, <variableName2> = <value2>
\end_layout

\begin_layout Plain Layout

WHERE <condition>;
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
plain
\end_layout

\end_inset


\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
UPDATE Example
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\tiny},breaklines=true"
inline false
status open

\begin_layout Plain Layout

mysql> UPDATE BRANCH
\end_layout

\begin_layout Plain Layout

    -> SET address = '123 diff st', name = 'name'
\end_layout

\begin_layout Plain Layout

    -> WHERE branch_id = 9; 
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\noindent
\begin_inset listings
lstparams "basicstyle={\tiny},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

Query OK, 1 row affected (0.00 sec) 
\end_layout

\begin_layout Plain Layout

Rows matched: 1  Changed: 1  Warnings: 0
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\noindent
\begin_inset listings
lstparams "basicstyle={\tiny},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

mysql> SELECT *
\end_layout

\begin_layout Plain Layout

     -> FROM branch;
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\noindent
\begin_inset listings
lstparams "basicstyle={\tiny},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

+-----------+---------------+----------------------+---------+-------+-------+
\end_layout

\begin_layout Plain Layout

| branch_id | name          | address              | city    | state | zip
   |
\end_layout

\begin_layout Plain Layout

+-----------+---------------+----------------------+---------+-------+-------+
 
\end_layout

\begin_layout Plain Layout

|         1 | Headquarters  | 3882 Main St.
        | Waltham | MA    | 02451 |
\end_layout

\begin_layout Plain Layout

|         2 | Woburn Branch | 422 Maple St.
        | Woburn  | MA    | 01801 |
\end_layout

\begin_layout Plain Layout

|         3 | Quincy Branch | 125 Presidential Way | Quincy  | MA    | 02169
 |
\end_layout

\begin_layout Plain Layout

|         4 | So.
 NH Branch | 378 Maynard Ln.
      | Salem   | NH    | 03079 |
\end_layout

\begin_layout Plain Layout

|         5 | Headquarters  | 3882 Main St.
        | Waltham | MA    | 02451 |
\end_layout

\begin_layout Plain Layout

|         6 | Woburn Branch | 422 Maple St.
        | Woburn  | MA    | 01801 |
\end_layout

\begin_layout Plain Layout

|         7 | Quincy Branch | 125 Presidential Way | Quincy  | MA    | 02169
 |
\end_layout

\begin_layout Plain Layout

|         8 | So.
 NH Branch | 378 Maynard Ln.
      | Salem   | NH    | 03079 |
\end_layout

\begin_layout Plain Layout

|         9 | name          | 123 diff st          | city    | ST    | 90210
 |
\end_layout

\begin_layout Plain Layout

+-----------+---------------+----------------------+---------+-------+-------+
\end_layout

\begin_layout Plain Layout

9 rows in set (0.00 sec)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Data Definition: DELETE
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Definition

\series bold
DELETE Statement
\series default
: The DELETE statement deletes a set of rows from a table.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "backgroundcolor={\color{lightgrey}}"
inline false
status open

\begin_layout Plain Layout

DELETE FROM <table>
\end_layout

\begin_layout Plain Layout

[WHERE <condition>];
\end_layout

\end_inset


\end_layout

\begin_layout AlertBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Warning
\end_layout

\end_inset

 If no where clause is used, the DELETE statement will delete 
\series bold
\bar under
all
\series default
\bar default
 rows in the table.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
plain
\end_layout

\end_inset


\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
DELETE Example
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\tiny},breaklines=true"
inline false
status open

\begin_layout Plain Layout

mysql> DELETE FROM branch
\end_layout

\begin_layout Plain Layout

    -> WHERE address = '123 diff st'; 
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\noindent
\begin_inset listings
lstparams "basicstyle={\tiny},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

Query OK, 1 row affected (0.01 sec)
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\noindent
\begin_inset listings
lstparams "basicstyle={\tiny},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

mysql> SELECT *
\end_layout

\begin_layout Plain Layout

    -> FROM branch;
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\noindent
\begin_inset listings
lstparams "basicstyle={\tiny},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

+-----------+---------------+----------------------+---------+-------+-------+
 
\end_layout

\begin_layout Plain Layout

| branch_id | name          | address              | city    | state | zip
   | 
\end_layout

\begin_layout Plain Layout

+-----------+---------------+----------------------+---------+-------+-------+
 
\end_layout

\begin_layout Plain Layout

|         1 | Headquarters  | 3882 Main St.
        | Waltham | MA    | 02451 | 
\end_layout

\begin_layout Plain Layout

|         2 | Woburn Branch | 422 Maple St.
        | Woburn  | MA    | 01801 | 
\end_layout

\begin_layout Plain Layout

|         3 | Quincy Branch | 125 Presidential Way | Quincy  | MA    | 02169
 | 
\end_layout

\begin_layout Plain Layout

|         4 | So.
 NH Branch | 378 Maynard Ln.
      | Salem   | NH    | 03079 | 
\end_layout

\begin_layout Plain Layout

|         5 | Headquarters  | 3882 Main St.
        | Waltham | MA    | 02451 | 
\end_layout

\begin_layout Plain Layout

|         6 | Woburn Branch | 422 Maple St.
        | Woburn  | MA    | 01801 | 
\end_layout

\begin_layout Plain Layout

|         7 | Quincy Branch | 125 Presidential Way | Quincy  | MA    | 02169
 | 
\end_layout

\begin_layout Plain Layout

|         8 | So.
 NH Branch | 378 Maynard Ln.
      | Salem   | NH    | 03079 | 
\end_layout

\begin_layout Plain Layout

+-----------+---------------+----------------------+---------+-------+-------+
 
\end_layout

\begin_layout Plain Layout

8 rows in set (0.00 sec)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout FragileFrame

\end_layout

\begin_layout Separator

\end_layout

\begin_layout Subsection
Data Manipulation
\end_layout

\begin_layout FragileFrame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Data Manipulation: CREATE
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Definition

\series bold
CREATE Statement
\series default
: The CREATE statement creates a table or view.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "backgroundcolor={\color{lightgrey}},basicstyle={\footnotesize},breaklines=true,language=SQL"
inline false
status open

\begin_layout Plain Layout

CREATE TABLE <tableName>
\end_layout

\begin_layout Plain Layout

	(<variableName1> <variableType1> [<specifications>],
\end_layout

\begin_layout Plain Layout

	<variableName2> <variableType2> [<specifications>],
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "backgroundcolor={\color{lightgrey}},basicstyle={\footnotesize},breaklines=true,language=SQL"
inline false
status open

\begin_layout Plain Layout

CREATE VIEW <view_name> [(<column_list>)]
\end_layout

\begin_layout Plain Layout

AS <select_statement>
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
plain
\end_layout

\end_inset


\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
CREATE Example
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\tiny},breaklines=true"
inline false
status open

\begin_layout Plain Layout

mysql> CREATE TABLE student
\end_layout

\begin_layout Plain Layout

    -> (stud_num INT UNSIGNED,
\end_layout

\begin_layout Plain Layout

    -> fname VARCHAR(30),
\end_layout

\begin_layout Plain Layout

    -> lname VARCHAR(30),
\end_layout

\begin_layout Plain Layout

    -> CONSTRAINT pk_student PRIMARY KEY (stud_num)); 
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\noindent

\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\tiny},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

Query OK, 0 rows affected (0.03 sec)
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\noindent

\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\tiny},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

mysql> DESC student; 
\end_layout

\begin_layout Plain Layout

+----------+------------------+------+-----+---------+-------+ 
\end_layout

\begin_layout Plain Layout

| Field    | Type             | Null | Key | Default | Extra | 
\end_layout

\begin_layout Plain Layout

+----------+------------------+------+-----+---------+-------+ 
\end_layout

\begin_layout Plain Layout

| stud_num | int(10) unsigned | NO   | PRI | 0       |       | 
\end_layout

\begin_layout Plain Layout

| fname    | varchar(30)      | YES  |     | NULL    |       | 
\end_layout

\begin_layout Plain Layout

| lname    | varchar(30)      | YES  |     | NULL    |       | 
\end_layout

\begin_layout Plain Layout

+----------+------------------+------+-----+---------+-------+ 
\end_layout

\begin_layout Plain Layout

3 rows in set (0.00 sec)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Data Manipulation: ALTER
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Definition

\series bold
ALTER Statement
\series default
: Used to change the characteristics of tables, views, and indices.
 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true,language=SQL"
inline false
status open

\begin_layout Plain Layout

ALTER TABLE <table_name>
\end_layout

\begin_layout Plain Layout

ADD [COLUMN] <col_name> <col_dataType>;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ALTER TABLE <table_name>
\end_layout

\begin_layout Plain Layout

MODIFY [COLUMN] <col_name> <col_dataType> <modification>;
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
plain
\end_layout

\end_inset


\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
ALTER Example
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\tiny},breaklines=true"
inline false
status open

\begin_layout Plain Layout

mysql> ALTER TABLE student 
\end_layout

\begin_layout Plain Layout

    -> ADD major  VARCHAR(20);
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\noindent

\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\tiny},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

Query OK, 0 rows affected (0.03 sec) 
\end_layout

\begin_layout Plain Layout

Records: 0  Duplicates: 0  Warnings: 0
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\noindent

\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\tiny},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

mysql> DESC student; 
\end_layout

\begin_layout Plain Layout

+----------+------------------+------+-----+---------+-------+ 
\end_layout

\begin_layout Plain Layout

| Field    | Type             | Null | Key | Default | Extra | 
\end_layout

\begin_layout Plain Layout

+----------+------------------+------+-----+---------+-------+ 
\end_layout

\begin_layout Plain Layout

| stud_num | int(10) unsigned | NO   | PRI | 0       |       | 
\end_layout

\begin_layout Plain Layout

| fname    | varchar(30)      | YES  |     | NULL    |       | 
\end_layout

\begin_layout Plain Layout

| lname    | varchar(30)      | YES  |     | NULL    |       | 
\end_layout

\begin_layout Plain Layout

| major    | varchar(20)      | YES  |     | NULL    |       | 
\end_layout

\begin_layout Plain Layout

+----------+------------------+------+-----+---------+-------+ 
\end_layout

\begin_layout Plain Layout

4 rows in set (0.01 sec)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Data Manipulation: DROP
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Definition

\series bold
DROP Statement
\series default
: Delete/remove tables, indexes and databases.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "backgroundcolor={\color{lightgrey}},breaklines=true,language=SQL"
inline false
status open

\begin_layout Plain Layout

DROP TABLE <table>;
\end_layout

\begin_layout Plain Layout

DROP DATABASE <database>;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "backgroundcolor={\color{lightgrey}},breaklines=true,language=SQL"
inline false
status open

\begin_layout Plain Layout

DROP INDEX <table>.<index_name>; /* SQL Server */
\end_layout

\begin_layout Plain Layout

DROP INDEX <index_name>; /* DB2/Oracle */
\end_layout

\begin_layout Plain Layout

ALTER TABLE <table> DROP INDEX <index>; /* MySQL */
\end_layout

\end_inset


\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Drop student table
\end_layout

\end_inset


\begin_inset listings
lstparams "basicstyle={\tiny},breaklines=true"
inline false
status open

\begin_layout Plain Layout

mysql> DROP TABLE student;
\end_layout

\begin_layout Plain Layout

Query OK, 0 rows affected (0.00 sec)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Subsection
Data Control
\end_layout

\begin_layout FragileFrame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Data Control: GRANT
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Definition

\series bold
GRANT Statement
\series default
: Grants privileges to users accounts on databases, tables, columns, or
 routines.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "backgroundcolor={\color{lightgrey}},breaklines=true,language=SQL"
inline false
status open

\begin_layout Plain Layout

GRANT <priv_type> PRIVILEGES ON `<database>`.* TO '<user>'@'<host>'
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
plain
\end_layout

\end_inset


\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
GRANT Example
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\tiny},breaklines=true"
inline false
status open

\begin_layout Plain Layout

mysql> GRANT ALL PRIVILEGES ON bank.* TO 'darrell'@'localhost'; 
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\noindent

\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\tiny},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

Query OK, 0 rows affected (0.01 sec)
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\noindent

\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\tiny},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

mysql> QUIT; 
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\noindent

\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\tiny},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

Bye 
\end_layout

\begin_layout Plain Layout

$ mysql -u darrell -p
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\noindent

\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\tiny},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

Enter password:
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\noindent

\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\tiny},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

mysql> SHOW GRANTS;
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\noindent

\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\tiny},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

+-------------------------------------------------------------------------------
---------------------------------+
\end_layout

\begin_layout Plain Layout

| Grants for darrell@localhost                                         
                                          |
\end_layout

\begin_layout Plain Layout

+-------------------------------------------------------------------------------
---------------------------------+ 
\end_layout

\begin_layout Plain Layout

| GRANT USAGE ON *.* TO 'darrell'@'localhost' IDENTIFIED BY PASSWORD '*KFAS8538DA
B594677AC88F16DI7H6E3D2CAD070C' | 
\end_layout

\begin_layout Plain Layout

| GRANT ALL PRIVILEGES ON `bank`.* TO 'darrell'@'localhost'             
                                         
\end_layout

\begin_layout Plain Layout

+-------------------------------------------------------------------------------
---------------------------------+ 
\end_layout

\begin_layout Plain Layout

2 rows in set (0.00 sec)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Data Control: REVOKE
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Definition

\series bold
REVOKE Statement
\series default
: Revokes privileges to users accounts on databases, tables, columns, or
 routines.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "backgroundcolor={\color{lightgrey}},breaklines=true,language=SQL"
inline false
status open

\begin_layout Plain Layout

REVOKE <priv_type> PRIVILEGES ON `<database>`.* FROM '<user>'@'<host>'
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
plain
\end_layout

\end_inset


\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
REVOKE Example
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\tiny},breaklines=true"
inline false
status open

\begin_layout Plain Layout

mysql> REVOKE ALL PRIVILEGES ON bank.* FROM 'darrell'@'localhost'; 
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\noindent

\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\tiny},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

Query OK, 0 rows affected (0.00 sec) 
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\noindent

\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\tiny},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

mysql> QUIT; 
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\noindent

\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\tiny},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

Bye 
\end_layout

\begin_layout Plain Layout

$ mysql -u darrell -p
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\noindent

\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\tiny},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

Enter password:
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\noindent

\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\tiny},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

mysql> SHOW GRANTS;
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\noindent

\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\tiny},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

+-------------------------------------------------------------------------------
---------------------------------+ 
\end_layout

\begin_layout Plain Layout

| Grants for darrell@localhost                                         
                                          |
\end_layout

\begin_layout Plain Layout

+-------------------------------------------------------------------------------
---------------------------------+ 
\end_layout

\begin_layout Plain Layout

| GRANT USAGE ON *.* TO 'darrell'@'localhost' IDENTIFIED BY PASSWORD '*KFAS8538DA
B594677AC88F16DI7H6E3D2CAD070C' | 
\end_layout

\begin_layout Plain Layout

+-------------------------------------------------------------------------------
---------------------------------+ 
\end_layout

\begin_layout Plain Layout

1 row in set (0.00 sec)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Section
Data Types
\end_layout

\begin_layout Frame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Built-in Data Types
\end_layout

\end_inset


\end_layout

\begin_layout Frame
There 3 main data types
\end_layout

\begin_deeper
\begin_layout Enumerate
Numeric
\end_layout

\begin_layout Enumerate
Strings
\end_layout

\begin_layout Enumerate
Temporal (Date, Times)
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Subsection
Numeric Data
\end_layout

\begin_layout Frame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Numeric: Integer
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Tabular
<lyxtabular version="3" rows="12" columns="4">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bytes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Min Value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Max Value
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Signed/Unsigned)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Signed/Unsigned)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="left" valignment="middle" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size footnotesize
TINYINT
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset Formula $-2^{7}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset Formula $2^{7}-1$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset Formula $0$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset Formula $2^{8}-1$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="left" valignment="middle" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size footnotesize
SMALLINT
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset Formula $-2^{15}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset Formula $2^{15}-1$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset Formula $0$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset Formula $2^{16}-1$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="left" valignment="middle" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size footnotesize
MEDIUMINT
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset Formula $-2^{23}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset Formula $2^{23}-1$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset Formula $0$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset Formula $2^{24}-1$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="left" valignment="middle" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size footnotesize
INT
\series default
, 
\series bold
INTEGER
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset Formula $-2^{31}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset Formula $2^{31}-1$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset Formula $0$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset Formula $2^{31}-1$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="left" valignment="middle" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size footnotesize
BIGINT
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset Formula $-2^{39}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset Formula $2^{39}-1$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset Formula $0$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset Formula $2^{39}-1$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Numeric: Fixed-Point
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
Fixed-Point data types have two components usually supplied by the user
 (Precision and Scale).
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},breaklines=true"
inline false
status open

\begin_layout Plain Layout

<variableName> DECIMAL(<integer-Precision>, 
\end_layout

\begin_layout Plain Layout

	<integer-Scale>)
\end_layout

\end_inset


\end_layout

\begin_layout Pause

\end_layout

\begin_layout Description
Precision: How many significant digits there are (before and after the decimal)
\end_layout

\begin_layout Description
Scale: How many digits are after the decimal point
\end_layout

\begin_layout Itemize
The max value for 
\emph on
\bar under
Precision
\emph default
\bar default
 is 65, with a default value of 10
\end_layout

\begin_layout Itemize

\emph on
\bar under
Scale's
\emph default
\bar default
 min value is 0, also the default value
\end_layout

\begin_layout Example*
For a variable column to take on values from -999.99 to 999.99:
\end_layout

\begin_layout Example*
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<variableName> DECIMAL(5, 2)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Numeric: Fixed-Point
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Description

\series bold
DECIMAL,
\begin_inset space ~
\end_inset

DEC
\series default
,
\begin_inset space ~
\end_inset


\series bold
FIXED
\series default
,
\series bold

\begin_inset space ~
\end_inset

NUMERIC
\series default
 are alases for this data type
\end_layout

\begin_layout Itemize

\series bold
DECIMAL
\series default
 is equivalent to 
\series bold
DECIMAL(10), DECIMAL(10,0)
\end_layout

\begin_layout Itemize
This is the best data type for money and other numerical values needing
 exact precision
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Subsection
Strings
\end_layout

\begin_layout Frame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Strings
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Description
CHAR(<integer>) /* a string of fixed length */
\end_layout

\begin_deeper
\begin_layout Itemize
Has a max length of 255 bytes (usually 1 byte == character, depending on
 the char type)
\end_layout

\end_deeper
\begin_layout Description
VARCHAR(<integer>) /* a string of variable length with set max length */
\end_layout

\begin_deeper
\begin_layout Itemize
Has a max length of 65,535 bytes (usually 1 byte == character, depending
 on the char type)
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Strings
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Description
Text
\begin_inset space ~
\end_inset

Data Used for when you might need to exceed the 64 KB limit for VARCHAR
 (specific for MySQL, other SQL servers use similar but not the same types)
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Text Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Max Bytes
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
TINYTEXT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $2^{8}-1=$
\end_inset

255
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
TEXT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $2^{16}-1=$
\end_inset

65,535
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
MEDIUMTEXT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $2^{24}-1=$
\end_inset

16,777,215
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
LONGTEXT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $2^{32}-1=$
\end_inset

4,294,967,295
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Itemize
Any text entered that is larger than the max size, the data will be truncated
\end_layout

\begin_layout Itemize
When being sorted, only the first 1,024 bytes are used (MySQL)
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Subsection
Temporal Data
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Date/Time
\end_layout

\end_inset


\end_layout

\begin_layout PlainFrame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Temporal Data
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="4">
<features rotate="0" tabularvalignment="middle" tabularwidth="100line%">
<column alignment="left" valignment="top">
<column alignment="right" valignment="top">
<column alignment="right" valignment="top" width="0pt">
<column alignment="right" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Data Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Default format
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Min Range
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Max Range
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
DATE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
'YYYY-MM-DD'
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
'1000-01-01'
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
'9999-12-31'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
DATETIME
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
'YYYY-MM-DD HH:MM:SS'
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
'1000-01-01 00:00:00'
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
'9999-12-31 23:59:59'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
TIMESTAMP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
'YYYY-MM-DD HH:MM:SS' 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
'1970-01-01 00:00:01'
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
'2038-01-19 03:14:07'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
YEAR
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
'YYYY'
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
'1901'
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
'2155'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
TIME
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
'HHH:MM:SS'
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
'-838:59:59'
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
'838:59:59'
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Itemize
Date parts MUST ALWAYS be given in year-month-day order
\end_layout

\begin_layout Itemize

\series bold
DATETIME
\series default
 and 
\series bold
TIMESTAMP
\series default
 can include fractional seconds part in up to microseconds (6 digits) precision.
\end_layout

\begin_deeper
\begin_layout Description
DATETIME/
\series bold
TIMESTAMP
\series default
 Using 'YYYY-MM-DD HH:MM:SS[.fraction]' with range '1000-01-01 00:00:00.000000'
 to '9999-12-31 23:59:59.999999'
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
DATETIME
\series default
 and 
\series bold
TIMESTAMP
\series default
 data types 
\bar under
can
\bar default
 offer automatic initialization to the current date and time
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Temporal Data
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
SQL converts 
\series bold
TIMESTAMP
\series default
 to UTC for storage, meaning it gives back different values depending on
 the current time zone, it's being accessed from.
\end_layout

\begin_deeper
\begin_layout Itemize
This is useful as data timestamped in one location does not need to be changed
 when doing data analysis in another time zone.
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Subsection
Null Values
\end_layout

\begin_layout Frame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Null Values
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Numeric, strings and temporal data types can have NULL values.
\end_layout

\begin_layout Standard
A field can never be equal to NULL, but should be considered unknown or
 missing data.
\end_layout

\begin_layout Standard
For instance, if either 
\begin_inset Formula $x$
\end_inset

 or 
\begin_inset Formula $y$
\end_inset

 is NULL:
\end_layout

\begin_layout Itemize
\begin_inset Formula $x+y\implies$
\end_inset

 NULL
\end_layout

\begin_layout Itemize
\begin_inset Formula $x>y\implies$
\end_inset

 NULL
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Standard
To test for NULL values use
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="4">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
<attribute> IS NULL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
<attribute> IS NOT NULL
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Null Values
\end_layout

\end_inset


\end_layout

\begin_layout Frame
SQL uses a three-value logic system: TRUE, FALSE, NULL:
\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="4">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\wedge$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TRUE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FALSE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NULL
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TRUE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
T
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
F
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NULL
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FALSE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
F
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
F
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
F
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NULL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NULL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NULL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NULL
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Pause

\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="4">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\vee$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TRUE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FALSE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NULL
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TRUE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
T
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
T
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
T
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FALSE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
T
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
F
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NULL
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NULL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
T
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NULL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NULL
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Pause

\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="4">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NOT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TRUE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FALSE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NULL
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
F
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
T
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NULL
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Section
Constraints
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Constraints
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Constraints
\end_layout

\end_inset


\end_layout

\begin_layout Frame
Constraints limit what can be entered into fields in a table and help ensure
 encapsulation: 
\end_layout

\begin_deeper
\begin_layout Description
PRIMARY
\begin_inset space ~
\end_inset

KEY
\begin_inset space ~
\end_inset

constraints Uniquely identifies each record in a table (quickly referencing
 it)
\end_layout

\begin_layout Description
FOREIGN
\begin_inset space ~
\end_inset

KEY
\begin_inset space ~
\end_inset

constraints Points to a PRIMARY KEY of another table, enabling them to easily
 join them
\end_layout

\begin_layout Description
CHECK
\begin_inset space ~
\end_inset

constraints Limits the range of values that a field can take.
\end_layout

\begin_layout Description
UNIQUE
\begin_inset space ~
\end_inset

constraints Enforces uniqueness on an field (column).
\end_layout

\begin_layout Description
NOT
\begin_inset space ~
\end_inset

NULL
\begin_inset space ~
\end_inset

constraints Enforces a field to always contain a value.
\end_layout

\begin_layout Description
DROP
\begin_inset space ~
\end_inset

constraints Drops a constraint from a table.
\end_layout

\begin_layout Pause
We can also create indexes for fields making them easily searchable
\end_layout

\end_deeper
\begin_layout Frame

\end_layout

\begin_layout Separator

\end_layout

\begin_layout Section
Filter Clauses
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Filter Clauses
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
There are 2 filter clauses in SQL: WHERE and HAVING.
 
\end_layout

\begin_layout Standard
WHERE is performed before aggregation (GROUP BY) and HAVING is performed
 after, allowing aggregate functions such as COUNT(*), to be performed.
\end_layout

\begin_layout Description
Note: Unless specified there is an implicit GROUP BY statement for the whole
 row set.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
plain
\end_layout

\end_inset


\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
WHERE Clause
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
WHERE clauses filters the result set, removing rows the condition returns
 either FALSE or NULL.
\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\tiny},breaklines=true"
inline false
status open

\begin_layout Plain Layout

mysql> SELECT * 
\end_layout

\begin_layout Plain Layout

    -> FROM individual
\end_layout

\begin_layout Plain Layout

    -> WHERE lname > 'j'; 
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\noindent

\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\tiny},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

+---------+----------+---------+------------+
\end_layout

\begin_layout Plain Layout

| cust_id | fname    | lname   | birth_date |
\end_layout

\begin_layout Plain Layout

+---------+----------+---------+------------+
\end_layout

\begin_layout Plain Layout

|       2 | Susan    | Tingley | 1968-08-15 |
\end_layout

\begin_layout Plain Layout

|       3 | Frank    | Tucker  | 1958-02-06 |
\end_layout

\begin_layout Plain Layout

|       6 | John     | Spencer | 1962-09-14 |
\end_layout

\begin_layout Plain Layout

|       7 | Margaret | Young   | 1947-03-19 |
\end_layout

\begin_layout Plain Layout

+---------+----------+---------+------------+
\end_layout

\begin_layout Plain Layout

4 rows in set (0.00 sec)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
plain
\end_layout

\end_inset


\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
HAVING Clause
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
HAVING clauses are very similar to WHERE clauses but can have aggregate
 function in their conditions.
\end_layout

\begin_layout Standard
You can have a WHERE and HAVING clause in the same statement.
\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\tiny},breaklines=true"
inline false
status open

\begin_layout Plain Layout

mysql> SELECT title, COUNT(*)
\end_layout

\begin_layout Plain Layout

    -> FROM employee
\end_layout

\begin_layout Plain Layout

    -> GROUP BY title
\end_layout

\begin_layout Plain Layout

    -> HAVING COUNT(*) > 3;
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\noindent

\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\tiny},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

+-------------+----------+
\end_layout

\begin_layout Plain Layout

| title       | COUNT(*) |
\end_layout

\begin_layout Plain Layout

+-------------+----------+
\end_layout

\begin_layout Plain Layout

| Head Teller |        4 |
\end_layout

\begin_layout Plain Layout

| Teller      |        9 |
\end_layout

\begin_layout Plain Layout

+-------------+----------+
\end_layout

\begin_layout Plain Layout

2 rows in set (0.01 sec)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Predicate Operators
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="15" columns="3">
<features rotate="0" tabularvalignment="middle" tabularwidth="100line%">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Operator
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Example
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
=
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Equal to
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
WHERE gender = 'M'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
<>, !=
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Not equal to
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
WHERE gender <> 'M'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Greater than
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
WHERE num > 5
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
<
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Less than
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
WHERE num < 5
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
>=
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Greater than or equal to
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
WHERE num >= 5
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
<=
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Greater than or equal to
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
WHERE num <= 5
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
IS NULL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Value is NULL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
WHERE num IS NULL
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
IS NOT NULL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Value is not NULL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
WHERE num IS NOT NULL
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
BETWEEN
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Between an inclusive range
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
WHERE num BETWEEN 3 and 5
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
IN
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Value in a list of values
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
WHERE num IN (3, 5, 8)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
LIKE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Search for a pattern
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
WHERE str LIKE 'F%'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
EXISTS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Does subquery have any rows
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
WHERE EXISTS (<subquery>)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
REGEXP, RLIKE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
(MySQL) Search for a 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
WHERE str RLIKE '^[FG]'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
regular expression pattern
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
plain
\end_layout

\end_inset


\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
WHERE Clause Example
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
WHERE clauses filters the result set, removing rows the condition returns
 either FALSE or NULL.
\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\tiny},breaklines=true"
inline false
status open

\begin_layout Plain Layout

mysql> SELECT fname, lname, title
\end_layout

\begin_layout Plain Layout

    -> FROM employee
\end_layout

\begin_layout Plain Layout

    -> WHERE title in ('Teller', 'Head Teller'); 
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\noindent
\begin_inset listings
lstparams "basicstyle={\tiny},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

+----------+----------+-------------+
\end_layout

\begin_layout Plain Layout

| fname    | lname    | title       |
\end_layout

\begin_layout Plain Layout

+----------+----------+-------------+
\end_layout

\begin_layout Plain Layout

| Helen    | Fleming  | Head Teller |
\end_layout

\begin_layout Plain Layout

| Chris    | Tucker   | Teller      |
\end_layout

\begin_layout Plain Layout

| Sarah    | Parker   | Teller      |
\end_layout

\begin_layout Plain Layout

| Jane     | Grossman | Teller      |
\end_layout

\begin_layout Plain Layout

| Paula    | Roberts  | Head Teller |
\end_layout

\begin_layout Plain Layout

| Thomas   | Ziegler  | Teller      |
\end_layout

\begin_layout Plain Layout

| Samantha | Jameson  | Teller      |
\end_layout

\begin_layout Plain Layout

| John     | Blake    | Head Teller |
\end_layout

\begin_layout Plain Layout

| Cindy    | Mason    | Teller      |
\end_layout

\begin_layout Plain Layout

| Frank    | Portman  | Teller      |
\end_layout

\begin_layout Plain Layout

| Theresa  | Markham  | Head Teller |
\end_layout

\begin_layout Plain Layout

| Beth     | Fowler   | Teller      |
\end_layout

\begin_layout Plain Layout

| Rick     | Tulman   | Teller      |
\end_layout

\begin_layout Plain Layout

+----------+----------+-------------+
\end_layout

\begin_layout Plain Layout

13 rows in set (0.00 sec)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Operators Modifiers
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
The operators =, <>, !=, >, <, >=, <= can be used with a list of values
 and the operators ALL or ANY/SOME.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Description
ANY,
\begin_inset space ~
\end_inset

SOME Operator returns true, if operator is true for 
\series bold
\bar under
any
\series default
\bar default
 value (
\begin_inset Formula $E_{i}$
\end_inset

) in the set.
 
\begin_inset Formula 
\[
E_{1}\vee E_{2}\vee E_{3}\vee\cdots\vee E_{n}
\]

\end_inset


\end_layout

\begin_layout Description
ALL Operator returns true, if operator is true for 
\series bold
\bar under
all
\series default
\bar default
 values (
\begin_inset Formula $E_{i}$
\end_inset

) in the set.
\begin_inset Formula 
\[
E_{1}\wedge E_{2}\wedge E_{3}\wedge\cdots\wedge E_{n}
\]

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
plain
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
AND, OR Operators
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
A group of filter conditions can be linked together with AND or OR operators.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

WHERE (<condition1> AND <condition2> ) OR 
\end_layout

\begin_layout Plain Layout

	<condition3>
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
plain
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
AND, OR Operators Example
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Example
All tellers starting from 2003
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize}"
inline false
status open

\begin_layout Plain Layout

mysql> SELECT fname, lname, title, start_date
\end_layout

\begin_layout Plain Layout

    -> FROM employee
\end_layout

\begin_layout Plain Layout

    -> WHERE title in ('Teller', 'Head Teller') 
\end_layout

\begin_layout Plain Layout

    -> AND YEAR(start_date) >= 2003;
\end_layout

\end_inset


\end_layout

\begin_layout Pause

\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize}"
inline false
status open

\begin_layout Plain Layout

+----------+---------+-------------+------------+
\end_layout

\begin_layout Plain Layout

| fname    | lname   | title       | start_date |
\end_layout

\begin_layout Plain Layout

+----------+---------+-------------+------------+
\end_layout

\begin_layout Plain Layout

| Helen    | Fleming | Head Teller | 2004-03-17 |
\end_layout

\begin_layout Plain Layout

| Chris    | Tucker  | Teller      | 2004-09-15 |
\end_layout

\begin_layout Plain Layout

| Samantha | Jameson | Teller      | 2003-01-08 |
\end_layout

\begin_layout Plain Layout

| Frank    | Portman | Teller      | 2003-04-01 |
\end_layout

\begin_layout Plain Layout

+----------+---------+-------------+------------+
\end_layout

\begin_layout Plain Layout

4 rows in set (0.00 sec)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Section
Grouping and Aggregate Functions
\end_layout

\begin_layout FragileFrame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
GROUP BY Clause
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
The GROUP BY Clause groups the result set by distinct entries in the columns
 specified.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "backgroundcolor={\color{lightgrey}},basicstyle={\footnotesize}"
inline false
status open

\begin_layout Plain Layout

SELECT <column tuple>, <aggregate function>
\end_layout

\begin_layout Plain Layout

FROM <table/join/view/subquery>
\end_layout

\begin_layout Plain Layout

[WHERE <condition>]
\end_layout

\begin_layout Plain Layout

GROUP BY <column tuple>
\end_layout

\begin_layout Plain Layout

[HAVING <condition>]
\end_layout

\end_inset


\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Only columns specified in the GROUP BY (and expressions of aggregate functions)
 can appear in the SELECT clause.
\end_layout

\begin_layout Itemize
There is an implicit GROUP BY statement allowing aggregate functions to
 be in the SELECT clause without a GROUP BY clause
\end_layout

\begin_layout Pause
\begin_inset listings
lstparams "basicstyle={\footnotesize}"
inline false
status open

\begin_layout Plain Layout

mysql> SELECT 'Total', SUM(avail_balance) FROM account;
\end_layout

\begin_layout Plain Layout

+-------+--------------------+
\end_layout

\begin_layout Plain Layout

| Total | SUM(avail_balance) |
\end_layout

\begin_layout Plain Layout

+-------+--------------------+
\end_layout

\begin_layout Plain Layout

| Total |          170754.46 |
\end_layout

\begin_layout Plain Layout

+-------+--------------------+
\end_layout

\begin_layout Plain Layout

1 row in set (0.00 sec)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
GROUP BY Clause
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename Images/Group By.pdf
	scale 60

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
plain
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
GROUP BY Example
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Example
Find the number of customers by type of customer and state
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize}"
inline false
status open

\begin_layout Plain Layout

mysql> SELECT cust_type_cd, state, COUNT(*)
\end_layout

\begin_layout Plain Layout

    -> FROM customer
\end_layout

\begin_layout Plain Layout

    -> GROUP BY cust_type_cd,  state;
\end_layout

\end_inset


\end_layout

\begin_layout Pause

\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize}"
inline false
status open

\begin_layout Plain Layout

+--------------+-------+----------+
\end_layout

\begin_layout Plain Layout

| cust_type_cd | state | COUNT(*) |
\end_layout

\begin_layout Plain Layout

+--------------+-------+----------+
\end_layout

\begin_layout Plain Layout

| I            | MA    |        7 |
\end_layout

\begin_layout Plain Layout

| I            | NH    |        2 |
\end_layout

\begin_layout Plain Layout

| B            | MA    |        2 |
\end_layout

\begin_layout Plain Layout

| B            | NH    |        2 |
\end_layout

\begin_layout Plain Layout

+--------------+-------+----------+
\end_layout

\begin_layout Plain Layout

4 rows in set (0.00 sec) 
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
plain
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
GROUP BY Example
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Example
Find the number of accounts for each customer and total available balance
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

mysql> SELECT cust_id, COUNT(*) AS Num_account, 
\end_layout

\begin_layout Plain Layout

    -> SUM(avail_balance) AS cust_avail_balance
\end_layout

\begin_layout Plain Layout

    -> FROM account
\end_layout

\begin_layout Plain Layout

    -> GROUP BY cust_id;
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\begin_inset listings
lstparams "basicstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

+---------+-------------+--------------------+
\end_layout

\begin_layout Plain Layout

| cust_id | Num_account | cust_avail_balance |
\end_layout

\begin_layout Plain Layout

+---------+-------------+--------------------+
\end_layout

\begin_layout Plain Layout

|       1 |           3 |            4557.75 |
\end_layout

\begin_layout Plain Layout

|       2 |           2 |            2458.02 |
\end_layout

\begin_layout Plain Layout

|       3 |           2 |            3270.25 |
\end_layout

\begin_layout Plain Layout

|       4 |           3 |            6788.98 |
\end_layout

\begin_layout Plain Layout

|       5 |           1 |            2237.97 |
\end_layout

\begin_layout Plain Layout

|       6 |           2 |           10122.37 |
\end_layout

\begin_layout Plain Layout

|       7 |           1 |            5000.00 |
\end_layout

\begin_layout Plain Layout

|       8 |           2 |            3875.18 |
\end_layout

\begin_layout Plain Layout

|       9 |           3 |           10971.22 |
\end_layout

\begin_layout Plain Layout

|      10 |           2 |           23575.12 |
\end_layout

\begin_layout Plain Layout

|      11 |           1 |            9345.55 |
\end_layout

\begin_layout Plain Layout

|      12 |           1 |           38552.05 |
\end_layout

\begin_layout Plain Layout

|      13 |           1 |           50000.00 |
\end_layout

\begin_layout Plain Layout

+---------+-------------+--------------------+
\end_layout

\begin_layout Plain Layout

13 rows in set (0.00 sec)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Aggregate Functions
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="2">
<features rotate="0" tabularvalignment="middle" tabularwidth="100col%">
<column alignment="left" valignment="top" width="50line%">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Function
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return value
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
AVG(<numeric col>)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Average of non-null values
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
COUNT(<col or *>)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Count of non-null values
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MAX(<col>)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Maximum value of column
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MIN(<col>)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Minimum value of column
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SUM(<numeric col>)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sum of column
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
STD(<numeric col>), STDDEV_POP(<numeric col>), STDDEV(<numeric col>)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Population standard deviation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
STDDEV_SAMP(<numeric col>)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sample standard deviation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
VAR_POP(<numeric col>), VARIANCE(<numeric col>)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Population variance
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
VAR_SAMP(<numeric col>)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sample variance estimate
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GROUP_CONCAT(<string col>)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A concatenated string
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
plain
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Aggregate Functions Example
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

mysql> SELECT position, GROUP_CONCAT(duties)
\end_layout

\begin_layout Plain Layout

    -> from exec_position
\end_layout

\begin_layout Plain Layout

    -> GROUP BY position;
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\begin_inset listings
lstparams "basicstyle={\scriptsize},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

+----------------+--------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
------------------------------------------------------------------------+
\end_layout

\begin_layout Plain Layout

| Events         | To assist the president and other vice-presidents in
 administrative duties and events.,To chair the organization and promotion
 of least one event per semester, and ensure its success.
\end_layout

\begin_layout Plain Layout

| Finance        | To ensure membership fees are collected and maintain
 a list of all past and current members.,To keep an up-to-date record of
 financial transactions and the purpose of expenditures, and to present
 this record to any club member or MathSoc Council member upon request.,To
 prepare a summary of the financial records at the end of the academic term.,To
 prepare the budget at the beginning of term.,To volunteer as president in
 the absence of the president.
\end_layout

\begin_layout Plain Layout

| President      | To be aware of MathSocs Policies and Bylaws in regards
 to the clubs management and activities.,To call and preside over general
 meetings.,To manage the executive team and the strategic direction of the
 club.,To post announcements of all club meetings, and to send notice of
 the same to MathSocs President and MathSocs Director of Internal Affairs
\end_layout

\begin_layout Plain Layout

| Senior Advisor | Have previous club management experience in order to
 advise the president and executive team on club matters.,To be aware of
 MathSoc's Policies and Bylaws in regards to the club's management and activitie
s.
\end_layout

\begin_layout Plain Layout

| Technology     | Maintain and update the club website.,Maintain any hardware,
 software, or technology the club may possess.,Perform the duties of a Vice
 President - Events if possible.
\end_layout

\begin_layout Plain Layout

+----------------+--------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
------------------------------------------------------------------------+
\end_layout

\begin_layout Plain Layout

5 rows in set (0.01 sec)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Aggregate Functions with DISTINCT
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
We can specify that aggregate functions work on only distinct values in
 the set:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "backgroundcolor={\color{lightgrey}}"
inline false
status open

\begin_layout Plain Layout

<aggregate fuction>(DISTINCT col)
\end_layout

\end_inset


\end_layout

\begin_layout Example
Find the number of distinct titles in employee
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

mysql> SELECT COUNT(DISTINCT title) 
\end_layout

\begin_layout Plain Layout

    -> FROM employee;
\end_layout

\begin_layout Plain Layout

+-----------------------+
\end_layout

\begin_layout Plain Layout

| COUNT(DISTINCT title) |
\end_layout

\begin_layout Plain Layout

+-----------------------+
\end_layout

\begin_layout Plain Layout

|                     7 |
\end_layout

\begin_layout Plain Layout

+-----------------------+
\end_layout

\begin_layout Plain Layout

1 row in set (0.00 sec)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
GROUP BY with ROLLUP
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
We can use aggregate functions with different levels of the GROUP BY clause
 by using WITH ROLLUP.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

mysql> SELECT title, COUNT(*) 
\end_layout

\begin_layout Plain Layout

    -> FROM employee 
\end_layout

\begin_layout Plain Layout

    -> GROUP BY title WITH ROLLUP;
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\begin_inset listings
lstparams "basicstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

+--------------------+----------+
\end_layout

\begin_layout Plain Layout

| title              | COUNT(*) |
\end_layout

\begin_layout Plain Layout

+--------------------+----------+
\end_layout

\begin_layout Plain Layout

| Head Teller        |        4 |
\end_layout

\begin_layout Plain Layout

| Loan Manager       |        1 |
\end_layout

\begin_layout Plain Layout

| Operations Manager |        1 |
\end_layout

\begin_layout Plain Layout

| President          |        1 |
\end_layout

\begin_layout Plain Layout

| Teller             |        9 |
\end_layout

\begin_layout Plain Layout

| Treasurer          |        1 |
\end_layout

\begin_layout Plain Layout

| Vice President     |        1 |
\end_layout

\begin_layout Plain Layout

| NULL               |       18 |
\end_layout

\begin_layout Plain Layout

+--------------------+----------+
\end_layout

\begin_layout Plain Layout

8 rows in set (0.00 sec)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example 2: GROUP BY with ROLLUP
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\tiny}"
inline false
status open

\begin_layout Plain Layout

mysql> SELECT title, YEAR(start_date), COUNT(*) 
\end_layout

\begin_layout Plain Layout

    -> FROM employee 
\end_layout

\begin_layout Plain Layout

    -> GROUP BY title, YEAR(start_date) WITH ROLLUP;
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\begin_inset listings
lstparams "basicstyle={\tiny}"
inline false
status open

\begin_layout Plain Layout

+--------------------+------------------+----------+
\end_layout

\begin_layout Plain Layout

| title              | YEAR(start_date) | COUNT(*) |
\end_layout

\begin_layout Plain Layout

+--------------------+------------------+----------+
\end_layout

\begin_layout Plain Layout

| Head Teller        |             2000 |        1 |
\end_layout

\begin_layout Plain Layout

| Head Teller        |             2001 |        1 |
\end_layout

\begin_layout Plain Layout

| Head Teller        |             2002 |        1 |
\end_layout

\begin_layout Plain Layout

| Head Teller        |             2004 |        1 |
\end_layout

\begin_layout Plain Layout

| Head Teller        |             NULL |        4 |
\end_layout

\begin_layout Plain Layout

| Loan Manager       |             2003 |        1 |
\end_layout

\begin_layout Plain Layout

| Loan Manager       |             NULL |        1 |
\end_layout

\begin_layout Plain Layout

| Operations Manager |             2002 |        1 |
\end_layout

\begin_layout Plain Layout

| Operations Manager |             NULL |        1 |
\end_layout

\begin_layout Plain Layout

| President          |             2001 |        1 |
\end_layout

\begin_layout Plain Layout

| President          |             NULL |        1 |
\end_layout

\begin_layout Plain Layout

| Teller             |             2000 |        1 |
\end_layout

\begin_layout Plain Layout

| Teller             |             2002 |        5 |
\end_layout

\begin_layout Plain Layout

| Teller             |             2003 |        2 |
\end_layout

\begin_layout Plain Layout

| Teller             |             2004 |        1 |
\end_layout

\begin_layout Plain Layout

| Teller             |             NULL |        9 |
\end_layout

\begin_layout Plain Layout

| Treasurer          |             2000 |        1 |
\end_layout

\begin_layout Plain Layout

| Treasurer          |             NULL |        1 |
\end_layout

\begin_layout Plain Layout

| Vice President     |             2002 |        1 |
\end_layout

\begin_layout Plain Layout

| Vice President     |             NULL |        1 |
\end_layout

\begin_layout Plain Layout

| NULL               |             NULL |       18 |
\end_layout

\begin_layout Plain Layout

+--------------------+------------------+----------+
\end_layout

\begin_layout Plain Layout

21 rows in set (0.00 sec)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Section
Joins
\end_layout

\begin_layout Frame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Joins
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
At times, we need information from multiple tables, to do this we need to
 join tables together.
 We can do this several ways:
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Enumerate

\series bold
CROSS JOIN
\series default
: The cartesian product of rows from each table.
\end_layout

\begin_layout Enumerate

\series bold
INNER JOIN
\series default
: Join two tables on a join-predicate, losing rows when evaluated false/null.
\end_layout

\begin_layout Enumerate

\series bold
OUTER JOIN
\series default
: Retains each record for the table(s) even when it has no matching rows
 from the other table.
 The returning table has null values for missing records.
\end_layout

\begin_deeper
\begin_layout Enumerate

\series bold
LEFT OUTER JOIN
\series default
: Keep each record for first table but not the table it's joining with.
\end_layout

\begin_layout Enumerate

\series bold
RIGHT OUTER JOIN
\series default
: Keep each record for second table but not the table it's joining with.
\end_layout

\begin_layout Enumerate

\series bold
FULL OUTER JOIN
\series default
: Keep all record for all tables.
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
NATURAL JOIN
\series default
: Tables with the exact same column name and datatype are joined along that
 column.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Subsection
CROSS JOIN
\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
CROSS JOIN
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Description
CROSS
\begin_inset space ~
\end_inset

JOIN is the cartesian product of two tables
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "backgroundcolor={\color{lightgrey}}"
inline false
status open

\begin_layout Plain Layout

SELECT <columns>
\end_layout

\begin_layout Plain Layout

FROM <table1> CROSS JOIN <table2>
\end_layout

\begin_layout Plain Layout

...
\end_layout

\end_inset


\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
CROSS JOIN
\end_layout

\end_inset

Two tables t1, t2 with values 1, 2 for t1 and 'one', 'two', 'three' for
 t2.
\end_layout

\begin_layout Pause
\begin_inset listings
lstparams "basicstyle={\tiny}"
inline false
status open

\begin_layout Plain Layout

mysql> SELECT t1.num, t2.num
\end_layout

\begin_layout Plain Layout

    -> FROM t1 CROSS JOIN t2;
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\begin_inset listings
lstparams "basicstyle={\tiny}"
inline false
status open

\begin_layout Plain Layout

+------+-------+
\end_layout

\begin_layout Plain Layout

| num  | num   |
\end_layout

\begin_layout Plain Layout

+------+-------+
\end_layout

\begin_layout Plain Layout

|    1 | one   |
\end_layout

\begin_layout Plain Layout

|    2 | one   |
\end_layout

\begin_layout Plain Layout

|    1 | two   |
\end_layout

\begin_layout Plain Layout

|    2 | two   |
\end_layout

\begin_layout Plain Layout

|    1 | three |
\end_layout

\begin_layout Plain Layout

|    2 | three |
\end_layout

\begin_layout Plain Layout

+------+-------+
\end_layout

\begin_layout Plain Layout

6 rows in set (0.00 sec)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Subsection
INNER JOIN 
\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
INNER JOIN
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Description
INNER
\begin_inset space ~
\end_inset

JOIN Join two tables where the join condition returns true.
 Discard when returning false or NULL.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "backgroundcolor={\color{lightgrey}}"
inline false
status open

\begin_layout Plain Layout

SELECT <columns>
\end_layout

\begin_layout Plain Layout

FROM <table1> INNER JOIN <table2>
\end_layout

\begin_layout Plain Layout

	ON <join condition>
\end_layout

\begin_layout Plain Layout

...
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
plain
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
INNER JOIN
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\tiny}"
inline false
status open

\begin_layout Plain Layout

mysql> SELECT e.name AS Name, e.position, p.duties
\end_layout

\begin_layout Plain Layout

    -> FROM exec AS e JOIN exec_position AS p 
\end_layout

\begin_layout Plain Layout

    -> ON e.position = p.position;
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\begin_inset listings
lstparams "basicstyle={\tiny},language=SQL"
inline false
status open

\begin_layout Plain Layout

+-------------------------+----------------+------------------------------------
--------------------------------------------------------------------------------
-----------------------------------------------------------+
\end_layout

\begin_layout Plain Layout

| Name                    | position       | duties                    
                                                                       
                   
\end_layout

\begin_layout Plain Layout

+-------------------------+----------------+------------------------------------
--------------------------------------------------------------------------------
-----------------------------------------------------------+
\end_layout

\begin_layout Plain Layout

| Ajanthan Thavaraja (Aj) | Events         | To assist the president and
 other vice-presidents in administrative duties and events.
                              
\end_layout

\begin_layout Plain Layout

| Ajanthan Thavaraja (Aj) | Events         | To chair the organization and
 promotion of least one event per semester, and ensure its success.
                    
\end_layout

\begin_layout Plain Layout

| Darrell Aucoin          | President      | To be aware of MathSocs Policies
 and Bylaws in regards to the clubs management and activities.
                      
\end_layout

\begin_layout Plain Layout

| Darrell Aucoin          | President      | To call and preside over general
 meetings.
                                                                       
   
\end_layout

\begin_layout Plain Layout

| Darrell Aucoin          | President      | To manage the executive team
 and the strategic direction of the club.
                                               
\end_layout

\begin_layout Plain Layout

| Darrell Aucoin          | President      | To post announcements of all
 club meetings, and to send notice of the same to MathSocs President and
 MathSocs Director of Internal Affairs
\end_layout

\begin_layout Plain Layout

| JinCheng Wong           | Events         | To assist the president and
 other vice-presidents in administrative duties and events.
                              
\end_layout

\begin_layout Plain Layout

| JinCheng Wong           | Events         | To chair the organization and
 promotion of least one event per semester, and ensure its success.
                    
\end_layout

\begin_layout Plain Layout

| Massey Cashore          | Events         | To assist the president and
 other vice-presidents in administrative duties and events.
                              
\end_layout

\begin_layout Plain Layout

| Massey Cashore          | Events         | To chair the organization and
 promotion of least one event per semester, and ensure its success.
                    
\end_layout

\begin_layout Plain Layout

| Jacob Burns             | President      | To be aware of MathSocs Policies
 and Bylaws in regards to the clubs management and activities.
                      
\end_layout

\begin_layout Plain Layout

| Jacob Burns             | President      | To call and preside over general
 meetings.
                                                                       
   
\end_layout

\begin_layout Plain Layout

| Jacob Burns             | President      | To manage the executive team
 and the strategic direction of the club.
                                               
\end_layout

\begin_layout Plain Layout

| Jacob Burns             | President      | To post announcements of all
 club meetings, and to send notice of the same to MathSocs President and
 MathSocs Director of Internal Affairs
\end_layout

\begin_layout Plain Layout

| Ming Pan                | Technology     | Maintain and update the club
 website.
                                                                       
        
\end_layout

\begin_layout Plain Layout

| Ming Pan                | Technology     | Maintain any hardware, software,
 or technology the club may possess.
                                                
\end_layout

\begin_layout Plain Layout

| Ming Pan                | Technology     | Perform the duties of a Vice
 President - Events if possible.
                                                        
\end_layout

\begin_layout Plain Layout

| Zixin Nie               | Events         | To assist the president and
 other vice-presidents in administrative duties and events.
                              
\end_layout

\begin_layout Plain Layout

| Zixin Nie               | Events         | To chair the organization and
 promotion of least one event per semester, and ensure its success.
                    
\end_layout

\begin_layout Plain Layout

| Simon wang              | Senior Advisor | Have previous club management
 experience in order to advise the president and executive team on club
 matters.
       
\end_layout

\begin_layout Plain Layout

| Simon wang              | Senior Advisor | To be aware of MathSoc's Policies
 and Bylaws in regards to the club's management and activities.
                    
\end_layout

\begin_layout Plain Layout

| Alice Wang              | Finance        | To ensure membership fees are
 collected and maintain a list of all past and current members.
                        
\end_layout

\begin_layout Plain Layout

| Alice Wang              | Finance        | To keep an up-to-date record
 of financial transactions and the purpose of expenditures, and to present
 this record to any club member or MathSoc Council member upon request.
\end_layout

\begin_layout Plain Layout

| Alice Wang              | Finance        | To prepare a summary of the
 financial records at the end of the academic term.
                                      
\end_layout

\begin_layout Plain Layout

| Alice Wang              | Finance        | To prepare the budget at the
 beginning of term.
                                                                     
\end_layout

\begin_layout Plain Layout

| Alice Wang              | Finance        | To volunteer as president in
 the absence of the president.
                                                          
\end_layout

\begin_layout Plain Layout

+-------------------------+----------------+------------------------------------
--------------------------------------------------------------------------------
-----------------------------------------------------------+ 
\end_layout

\begin_layout Plain Layout

26 rows in set (0.00 sec)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
ON Clause
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
The ON clause specifies the join condition:
\end_layout

\begin_layout Itemize
The ON clause can use a multiple set of conditions connected by AND, OR
\end_layout

\begin_layout Itemize
USING(<join col>) can also be used if both tables have the same column name
 and type
\end_layout

\begin_layout Itemize
Some SQL implementations constructs the ON clause from the WHERE clause
 (DB2)
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
plain
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
INNER JOIN
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\tiny}"
inline false
status open

\begin_layout Plain Layout

mysql> SELECT e.name AS Name, e.position, p.duties
\end_layout

\begin_layout Plain Layout

    -> FROM exec AS e JOIN exec_position AS p 
\end_layout

\begin_layout Plain Layout

    ->   USING(position);
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\begin_inset listings
lstparams "basicstyle={\tiny},language=SQL"
inline false
status open

\begin_layout Plain Layout

+-------------------------+----------------+------------------------------------
--------------------------------------------------------------------------------
-----------------------------------------------------------+
\end_layout

\begin_layout Plain Layout

| Name                    | position       | duties                    
                                                                       
                   
\end_layout

\begin_layout Plain Layout

+-------------------------+----------------+------------------------------------
--------------------------------------------------------------------------------
-----------------------------------------------------------+
\end_layout

\begin_layout Plain Layout

| Ajanthan Thavaraja (Aj) | Events         | To assist the president and
 other vice-presidents in administrative duties and events.
                              
\end_layout

\begin_layout Plain Layout

| Ajanthan Thavaraja (Aj) | Events         | To chair the organization and
 promotion of least one event per semester, and ensure its success.
                    
\end_layout

\begin_layout Plain Layout

| Darrell Aucoin          | President      | To be aware of MathSocs Policies
 and Bylaws in regards to the clubs management and activities.
                      
\end_layout

\begin_layout Plain Layout

| Darrell Aucoin          | President      | To call and preside over general
 meetings.
                                                                       
   
\end_layout

\begin_layout Plain Layout

| Darrell Aucoin          | President      | To manage the executive team
 and the strategic direction of the club.
                                               
\end_layout

\begin_layout Plain Layout

| Darrell Aucoin          | President      | To post announcements of all
 club meetings, and to send notice of the same to MathSocs President and
 MathSocs Director of Internal Affairs
\end_layout

\begin_layout Plain Layout

| JinCheng Wong           | Events         | To assist the president and
 other vice-presidents in administrative duties and events.
                              
\end_layout

\begin_layout Plain Layout

| JinCheng Wong           | Events         | To chair the organization and
 promotion of least one event per semester, and ensure its success.
                    
\end_layout

\begin_layout Plain Layout

| Massey Cashore          | Events         | To assist the president and
 other vice-presidents in administrative duties and events.
                              
\end_layout

\begin_layout Plain Layout

| Massey Cashore          | Events         | To chair the organization and
 promotion of least one event per semester, and ensure its success.
                    
\end_layout

\begin_layout Plain Layout

| Jacob Burns             | President      | To be aware of MathSocs Policies
 and Bylaws in regards to the clubs management and activities.
                      
\end_layout

\begin_layout Plain Layout

| Jacob Burns             | President      | To call and preside over general
 meetings.
                                                                       
   
\end_layout

\begin_layout Plain Layout

| Jacob Burns             | President      | To manage the executive team
 and the strategic direction of the club.
                                               
\end_layout

\begin_layout Plain Layout

| Jacob Burns             | President      | To post announcements of all
 club meetings, and to send notice of the same to MathSocs President and
 MathSocs Director of Internal Affairs 
\end_layout

\begin_layout Plain Layout

| Ming Pan                | Technology     | Maintain and update the club
 website.
                                                                       
        
\end_layout

\begin_layout Plain Layout

| Ming Pan                | Technology     | Maintain any hardware, software,
 or technology the club may possess.
                                                
\end_layout

\begin_layout Plain Layout

| Ming Pan                | Technology     | Perform the duties of a Vice
 President - Events if possible.
                                                        
\end_layout

\begin_layout Plain Layout

| Zixin Nie               | Events         | To assist the president and
 other vice-presidents in administrative duties and events.
                              
\end_layout

\begin_layout Plain Layout

| Zixin Nie               | Events         | To chair the organization and
 promotion of least one event per semester, and ensure its success.
                    
\end_layout

\begin_layout Plain Layout

| Simon wang              | Senior Advisor | Have previous club management
 experience in order to advise the president and executive team on club
 matters.
       
\end_layout

\begin_layout Plain Layout

| Simon wang              | Senior Advisor | To be aware of MathSoc's Policies
 and Bylaws in regards to the club's management and activities.
                    
\end_layout

\begin_layout Plain Layout

| Alice Wang              | Finance        | To ensure membership fees are
 collected and maintain a list of all past and current members.
                        
\end_layout

\begin_layout Plain Layout

| Alice Wang              | Finance        | To keep an up-to-date record
 of financial transactions and the purpose of expenditures, and to present
 this record to any club member or MathSoc Council member upon request.
\end_layout

\begin_layout Plain Layout

| Alice Wang              | Finance        | To prepare a summary of the
 financial records at the end of the academic term.
                                      
\end_layout

\begin_layout Plain Layout

| Alice Wang              | Finance        | To prepare the budget at the
 beginning of term.
                                                                     
\end_layout

\begin_layout Plain Layout

| Alice Wang              | Finance        | To volunteer as president in
 the absence of the president.
                                                          
\end_layout

\begin_layout Plain Layout

+-------------------------+----------------+------------------------------------
--------------------------------------------------------------------------------
-----------------------------------------------------------+ 
\end_layout

\begin_layout Plain Layout

26 rows in set (0.00 sec)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Subsection
NATURAL JOIN 
\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
NATURAL JOIN
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Description
NATURAL
\begin_inset space ~
\end_inset

JOIN A join condition that lets the server decide on the join conditions
 based on:
\end_layout

\begin_layout Itemize
Same column names and types across columns for join
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
plain
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
NATURAL JOIN Example
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\tiny}"
inline false
status open

\begin_layout Plain Layout

mysql> SELECT a.account_id, a.cust_id, c.cust_type_cd, c.fed_id
\end_layout

\begin_layout Plain Layout

    -> FROM account a NATURAL JOIN customer c;
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\begin_inset listings
lstparams "basicstyle={\tiny},language=SQL"
inline false
status open

\begin_layout Plain Layout

+------------+---------+--------------+-------------+
\end_layout

\begin_layout Plain Layout

| account_id | cust_id | cust_type_cd | fed_id      |
\end_layout

\begin_layout Plain Layout

+------------+---------+--------------+-------------+
\end_layout

\begin_layout Plain Layout

|          1 |       1 | I            | 111-11-1111 |
\end_layout

\begin_layout Plain Layout

|          2 |       1 | I            | 111-11-1111 |
\end_layout

\begin_layout Plain Layout

|          3 |       1 | I            | 111-11-1111 |
\end_layout

\begin_layout Plain Layout

|          4 |       2 | I            | 222-22-2222 |
\end_layout

\begin_layout Plain Layout

|          5 |       2 | I            | 222-22-2222 |
\end_layout

\begin_layout Plain Layout

|          6 |       3 | I            | 333-33-3333 |
\end_layout

\begin_layout Plain Layout

|          7 |       3 | I            | 333-33-3333 |
\end_layout

\begin_layout Plain Layout

|          8 |       4 | I            | 444-44-4444 |
\end_layout

\begin_layout Plain Layout

|          9 |       4 | I            | 444-44-4444 |
\end_layout

\begin_layout Plain Layout

|         10 |       4 | I            | 444-44-4444 |
\end_layout

\begin_layout Plain Layout

|         11 |       5 | I            | 555-55-5555 |
\end_layout

\begin_layout Plain Layout

|         12 |       6 | I            | 666-66-6666 |
\end_layout

\begin_layout Plain Layout

|         13 |       6 | I            | 666-66-6666 |
\end_layout

\begin_layout Plain Layout

|         14 |       7 | I            | 777-77-7777 |
\end_layout

\begin_layout Plain Layout

|         15 |       8 | I            | 888-88-8888 |
\end_layout

\begin_layout Plain Layout

|         16 |       8 | I            | 888-88-8888 |
\end_layout

\begin_layout Plain Layout

|         17 |       9 | I            | 999-99-9999 |
\end_layout

\begin_layout Plain Layout

|         18 |       9 | I            | 999-99-9999 |
\end_layout

\begin_layout Plain Layout

|         19 |       9 | I            | 999-99-9999 |
\end_layout

\begin_layout Plain Layout

|         20 |      10 | B            | 04-1111111  |
\end_layout

\begin_layout Plain Layout

|         21 |      10 | B            | 04-1111111  |
\end_layout

\begin_layout Plain Layout

|         22 |      11 | B            | 04-2222222  |
\end_layout

\begin_layout Plain Layout

|         23 |      12 | B            | 04-3333333  |
\end_layout

\begin_layout Plain Layout

|         24 |      13 | B            | 04-4444444  |
\end_layout

\begin_layout Plain Layout

+------------+---------+--------------+-------------+
\end_layout

\begin_layout Plain Layout

24 rows in set (0.02 sec)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Subsection
OUTER JOIN
\end_layout

\begin_layout Frame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
OUTER JOIN
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Description
OUTER
\begin_inset space ~
\end_inset

JOIN A join that returns all rows for 1 or 2 tables, even when there is
 no corresponding value.
 In these cases, NULL values are entered for these corresponding rows.
\end_layout

\begin_layout Pause
There are 3 types of OUTER JOINs:
\end_layout

\begin_layout Enumerate

\series bold
LEFT OUTER JOIN
\series default
: An OUTER JOIN returning all rows of the table first mentioned.
\end_layout

\begin_layout Enumerate

\series bold
RIGHT OUTER JOIN
\series default
: An OUTER JOIN returning all rows of the table second mentioned.
\end_layout

\begin_layout Enumerate

\series bold
FULL OUTER JOIN
\series default
: An OUTER JOIN returning all rows of both tables.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
plain
\end_layout

\end_inset


\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
LEFT OUTER JOIN Example
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize}"
inline false
status open

\begin_layout Plain Layout

mysql> SELECT c.cust_id, b.name
\end_layout

\begin_layout Plain Layout

    -> FROM customer AS c LEFT OUTER JOIN business AS b
\end_layout

\begin_layout Plain Layout

    ->    ON c.cust_id = b.cust_id;
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\begin_inset listings
lstparams "basicstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

+---------+------------------------+
\end_layout

\begin_layout Plain Layout

| cust_id | name                   |
\end_layout

\begin_layout Plain Layout

+---------+------------------------+
\end_layout

\begin_layout Plain Layout

|      10 | Chilton Engineering    |
\end_layout

\begin_layout Plain Layout

|      11 | Northeast Cooling Inc.
 |
\end_layout

\begin_layout Plain Layout

|      12 | Superior Auto Body     |
\end_layout

\begin_layout Plain Layout

|      13 | AAA Insurance Inc.
     |
\end_layout

\begin_layout Plain Layout

|       1 | NULL                   |
\end_layout

\begin_layout Plain Layout

|       2 | NULL                   |
\end_layout

\begin_layout Plain Layout

|       3 | NULL                   |
\end_layout

\begin_layout Plain Layout

|       4 | NULL                   |
\end_layout

\begin_layout Plain Layout

|       5 | NULL                   |
\end_layout

\begin_layout Plain Layout

|       6 | NULL                   |
\end_layout

\begin_layout Plain Layout

|       7 | NULL                   |
\end_layout

\begin_layout Plain Layout

|       8 | NULL                   |
\end_layout

\begin_layout Plain Layout

|       9 | NULL                   |
\end_layout

\begin_layout Plain Layout

+---------+------------------------+
\end_layout

\begin_layout Plain Layout

13 rows in set (0.00 sec)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
plain
\end_layout

\end_inset


\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
RIGHT OUTER JOIN Example
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Now, if we change to a RIGHT OUTER JOIN:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize}"
inline false
status open

\begin_layout Plain Layout

mysql> SELECT c.cust_id, b.name
\end_layout

\begin_layout Plain Layout

    -> FROM customer AS c RIGHT OUTER JOIN business AS b
\end_layout

\begin_layout Plain Layout

    ->    ON c.cust_id = b.cust_id;
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\begin_inset listings
lstparams "basicstyle={\footnotesize}"
inline false
status open

\begin_layout Plain Layout

+---------+------------------------+
\end_layout

\begin_layout Plain Layout

| cust_id | name                   |
\end_layout

\begin_layout Plain Layout

+---------+------------------------+
\end_layout

\begin_layout Plain Layout

|      10 | Chilton Engineering    |
\end_layout

\begin_layout Plain Layout

|      11 | Northeast Cooling Inc.
 |
\end_layout

\begin_layout Plain Layout

|      12 | Superior Auto Body     |
\end_layout

\begin_layout Plain Layout

|      13 | AAA Insurance Inc.
     |
\end_layout

\begin_layout Plain Layout

+---------+------------------------+
\end_layout

\begin_layout Plain Layout

4 rows in set (0.00 sec)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
plain
\end_layout

\end_inset


\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
RIGHT OUTER JOIN Example
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Switching the tables in the FROM clause:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize}"
inline false
status open

\begin_layout Plain Layout

mysql> SELECT c.cust_id, b.name
\end_layout

\begin_layout Plain Layout

    -> FROM business AS b RIGHT OUTER JOIN customer AS c
\end_layout

\begin_layout Plain Layout

    ->    ON c.cust_id = b.cust_id;
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\begin_inset listings
lstparams "basicstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

+---------+------------------------+
\end_layout

\begin_layout Plain Layout

| cust_id | name                   |
\end_layout

\begin_layout Plain Layout

+---------+------------------------+
\end_layout

\begin_layout Plain Layout

|      10 | Chilton Engineering    |
\end_layout

\begin_layout Plain Layout

|      11 | Northeast Cooling Inc.
 |
\end_layout

\begin_layout Plain Layout

|      12 | Superior Auto Body     |
\end_layout

\begin_layout Plain Layout

|      13 | AAA Insurance Inc.
     |
\end_layout

\begin_layout Plain Layout

|       1 | NULL                   |
\end_layout

\begin_layout Plain Layout

|       2 | NULL                   |
\end_layout

\begin_layout Plain Layout

|       3 | NULL                   |
\end_layout

\begin_layout Plain Layout

|       4 | NULL                   |
\end_layout

\begin_layout Plain Layout

|       5 | NULL                   |
\end_layout

\begin_layout Plain Layout

|       6 | NULL                   |
\end_layout

\begin_layout Plain Layout

|       7 | NULL                   |
\end_layout

\begin_layout Plain Layout

|       8 | NULL                   |
\end_layout

\begin_layout Plain Layout

|       9 | NULL                   |
\end_layout

\begin_layout Plain Layout

+---------+------------------------+
\end_layout

\begin_layout Plain Layout

13 rows in set (0.00 sec)
\end_layout

\end_inset


\end_layout

\begin_layout Pause
We get the original table back with NULL values.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
plain
\end_layout

\end_inset


\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
FULL OUTER JOIN Example
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
FULL OUTER JOIN is 
\series bold
not
\series default
 implemented in MySQL, but in SQL versions that does, it will return all
 rows for both tables.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize}"
inline false
status open

\begin_layout Plain Layout

some sql> SELECT c.cust_id, b.name
\end_layout

\begin_layout Plain Layout

       -> FROM customer AS c FULL OUTER JOIN business AS b
\end_layout

\begin_layout Plain Layout

       ->    ON c.cust_id = b.cust_id;
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\begin_inset listings
lstparams "basicstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

+---------+------------------------+
\end_layout

\begin_layout Plain Layout

| cust_id | name                   |
\end_layout

\begin_layout Plain Layout

+---------+------------------------+
\end_layout

\begin_layout Plain Layout

|      10 | Chilton Engineering    |
\end_layout

\begin_layout Plain Layout

|      11 | Northeast Cooling Inc.
 |
\end_layout

\begin_layout Plain Layout

|      12 | Superior Auto Body     |
\end_layout

\begin_layout Plain Layout

|      13 | AAA Insurance Inc.
     |
\end_layout

\begin_layout Plain Layout

|       1 | NULL                   |
\end_layout

\begin_layout Plain Layout

|       2 | NULL                   |
\end_layout

\begin_layout Plain Layout

|       3 | NULL                   |
\end_layout

\begin_layout Plain Layout

|       4 | NULL                   |
\end_layout

\begin_layout Plain Layout

|       5 | NULL                   |
\end_layout

\begin_layout Plain Layout

|       6 | NULL                   |
\end_layout

\begin_layout Plain Layout

|       7 | NULL                   |
\end_layout

\begin_layout Plain Layout

|       8 | NULL                   |
\end_layout

\begin_layout Plain Layout

|       9 | NULL                   |
\end_layout

\begin_layout Plain Layout

+---------+------------------------+
\end_layout

\begin_layout Plain Layout

13 rows in set (0.00 sec)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Section
Subqueries
\end_layout

\begin_layout Frame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Subqueries
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Subqueries are queries contained into queries.
 These subqueries are contained in '(', ')'
\end_layout

\begin_layout Standard
There are two types of subqueries:
\end_layout

\begin_layout Enumerate

\series bold
Non-Correlated Subqueries
\series default
: Can be run 
\series bold
independently
\series default
 of the larger query.
\end_layout

\begin_layout Enumerate

\series bold
Correlated Subqueries
\series default
: Must be run concurrently with the outer query.
 They are 
\series bold
dependent
\series default
 on the outer query.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Subsection
Non-Correlated Subqueries
\end_layout

\begin_layout FragileFrame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Non-Correlated Subqueries
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Description
Non-Correlated
\begin_inset space ~
\end_inset

Subquery Any valid query within query that if executed by itself will produce
 a result (including empty set).
 These are enclosed in '(', ')' in 
\series bold
FROM
\series default
, 
\series bold
WHERE
\series default
, or 
\series bold
HAVING
\series default
 clause.
\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
What Stat Club Exec is in charge of posters?
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

mysql> SELECT e.name, e.position 
\end_layout

\begin_layout Plain Layout

    -> FROM exec AS e
\end_layout

\begin_layout Plain Layout

    -> WHERE e.questid in (SELECT poster FROM event);
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

+-------------------------+-----------+ 
\end_layout

\begin_layout Plain Layout

| name                    | position  |
\end_layout

\begin_layout Plain Layout

+-------------------------+-----------+ 
\end_layout

\begin_layout Plain Layout

| Ajanthan Thavaraja (Aj) | Events    | 
\end_layout

\begin_layout Plain Layout

| Darrell Aucoin          | President | 
\end_layout

\begin_layout Plain Layout

| Jacob Burns             | President | 
\end_layout

\begin_layout Plain Layout

+-------------------------+-----------+ 
\end_layout

\begin_layout Plain Layout

3 rows in set (0.00 sec)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Subsection
WITH Clause
\end_layout

\begin_layout FragileFrame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
WITH Clause
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Description
WITH
\begin_inset space ~
\end_inset

clause Makes a non-correlated subquery look like a table in the executed
 statement:
\end_layout

\begin_deeper
\begin_layout Itemize
Increases readability of the query as well as ensure that if it is used
 in several different places, it will only be executed once
\end_layout

\begin_layout Itemize
This clause is 
\series bold
NOT
\series default
 implemented in MySQL
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

WITH <subquery_name> [(colname1, ...)] AS
\end_layout

\begin_layout Plain Layout

	(SELECT ...),
\end_layout

\begin_layout Plain Layout

	<subquery_name2> [(colname1, ...)] AS
\end_layout

\begin_layout Plain Layout

	(SELECT ...)
\end_layout

\begin_layout Plain Layout

/* which then is used in the query */
\end_layout

\begin_layout Plain Layout

SELECT ...
 
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Subsection
Correlated Subqueries
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Correlated
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Correlated Subqueries
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Description
Correlated
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Subquery makes references it's containing query, executing it for every
 candidate row referenced.
\end_layout

\begin_layout Pause
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

mysql> SELECT c.cust_id, c.cust_type_cd, c.city
\end_layout

\begin_layout Plain Layout

    -> FROM customer AS c
\end_layout

\begin_layout Plain Layout

    -> WHERE (SELECT SUM(a.avail_balance)
\end_layout

\begin_layout Plain Layout

    ->    FROM account AS a
\end_layout

\begin_layout Plain Layout

    ->    WHERE a.cust_id = c.cust_id)
\end_layout

\begin_layout Plain Layout

    ->  BETWEEN 5000 AND 10000;
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

+---------+--------------+------------+
\end_layout

\begin_layout Plain Layout

| cust_id | cust_type_cd | city       |
\end_layout

\begin_layout Plain Layout

+---------+--------------+------------+
\end_layout

\begin_layout Plain Layout

|       4 | I            | Waltham    |
\end_layout

\begin_layout Plain Layout

|       7 | I            | Wilmington |
\end_layout

\begin_layout Plain Layout

|      11 | B            | Wilmington |
\end_layout

\begin_layout Plain Layout

+---------+--------------+------------+
\end_layout

\begin_layout Plain Layout

3 rows in set (0.00 sec)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Correlated Subqueries in SELECT Clause
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Correlated subqueries can be used in the 
\series bold
SELECT
\series default
, as well as the 
\series bold
WHERE
\series default
, and 
\series bold
HAVING
\series default
 clauses.
\end_layout

\begin_layout Pause
\begin_inset listings
lstparams "basicstyle={\footnotesize}"
inline false
status open

\begin_layout Plain Layout

mysql> SELECT c.cust_id, c.cust_type_cd, c.city, 
\end_layout

\begin_layout Plain Layout

    ->     (SELECT SUM(a.avail_balance) 
\end_layout

\begin_layout Plain Layout

    ->     FROM account a 
\end_layout

\begin_layout Plain Layout

    ->     WHERE a.cust_id = c.cust_id) AS balance 
\end_layout

\begin_layout Plain Layout

    -> FROM customer AS c;
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\begin_inset listings
lstparams "basicstyle={\footnotesize}"
inline false
status open

\begin_layout Plain Layout

+---------+--------------+------------+----------+
\end_layout

\begin_layout Plain Layout

| cust_id | cust_type_cd | city       | balance  |
\end_layout

\begin_layout Plain Layout

+---------+--------------+------------+----------+
\end_layout

\begin_layout Plain Layout

|       1 | I            | Lynnfield  |  4557.75 |
\end_layout

\begin_layout Plain Layout

|       2 | I            | Woburn     |  2458.02 |
\end_layout

\begin_layout Plain Layout

|       3 | I            | Quincy     |  3270.25 |
\end_layout

\begin_layout Plain Layout

|       4 | I            | Waltham    |  6788.98 |
\end_layout

\begin_layout Plain Layout

|       5 | I            | Salem      |  2237.97 |
\end_layout

\begin_layout Plain Layout

|       6 | I            | Waltham    | 10122.37 |
\end_layout

\begin_layout Plain Layout

|       7 | I            | Wilmington |  5000.00 |
\end_layout

\begin_layout Plain Layout

|       8 | I            | Salem      |  3875.18 |
\end_layout

\begin_layout Plain Layout

|       9 | I            | Newton     | 10971.22 |
\end_layout

\begin_layout Plain Layout

|      10 | B            | Salem      | 23575.12 |
\end_layout

\begin_layout Plain Layout

|      11 | B            | Wilmington |  9345.55 |
\end_layout

\begin_layout Plain Layout

|      12 | B            | Salem      | 38552.05 |
\end_layout

\begin_layout Plain Layout

|      13 | B            | Quincy     | 50000.00 |
\end_layout

\begin_layout Plain Layout

+---------+--------------+------------+----------+
\end_layout

\begin_layout Plain Layout

13 rows in set (0.00 sec)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Correlated vs Non-Correlated
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Correlated subquery is 
\series bold
dependent
\series default
 on outer query, non-correlated is 
\series bold
independent
\series default
.
\end_layout

\begin_layout Enumerate
Correlated subquery is executed 
\bar under
concurrently
\bar default
 with outer query, non-correlated is executed before.
\end_layout

\begin_layout Enumerate
In general, for speed of execution:
\begin_inset Formula 
\[
\mbox{Correlated subquery}<\mbox{Non-Correlated subquery}<\mbox{Joins}
\]

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
CASE Expressions
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Description
CASE
\begin_inset space ~
\end_inset

expresions Similar to a series of if else statements executed for every
 entry in a table.
 A new value is returned for every row in the table.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "backgroundcolor={\color{lightgrey}}"
inline false
status open

\begin_layout Plain Layout

CASE [<column>]
\end_layout

\begin_layout Plain Layout

	WHEN <condition1> THEN <result1>
\end_layout

\begin_layout Plain Layout

	WHEN <condition2> THEN <result2>
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	WHEN <condition n> THEN <result n>
\end_layout

\begin_layout Plain Layout

	[ELSE <result>]
\end_layout

\begin_layout Plain Layout

END
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The result can be of any datatype or the result of a correlated or non-correlate
d subquery (if the result is a single )
\end_layout

\begin_layout Itemize
CASE expressions are performed by themselves in the SELECT clause or within
 a function or aggregate function
\end_layout

\begin_deeper
\begin_layout Itemize
CASE expressions within aggregate functions allow us to do counts, sums,
 averages, etc.
 of particular occurances
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
plain
\end_layout

\end_inset


\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
CASE Expression Example
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\tiny}"
inline false
status open

\begin_layout Plain Layout

mysql> SELECT
\end_layout

\begin_layout Plain Layout

    ->   SUM(CASE
\end_layout

\begin_layout Plain Layout

    ->         WHEN EXTRACT(YEAR FROM open_date) = 2000 THEN 1
\end_layout

\begin_layout Plain Layout

    ->         ELSE 0
\end_layout

\begin_layout Plain Layout

    ->       END) year_2000,
\end_layout

\begin_layout Plain Layout

    ->   SUM(CASE
\end_layout

\begin_layout Plain Layout

    ->         WHEN EXTRACT(YEAR FROM open_date) = 2001 THEN 1
\end_layout

\begin_layout Plain Layout

    ->         ELSE 0
\end_layout

\begin_layout Plain Layout

    ->       END) year_2001,
\end_layout

\begin_layout Plain Layout

    ->   SUM(CASE
\end_layout

\begin_layout Plain Layout

    ->         WHEN EXTRACT(YEAR FROM open_date) = 2002 THEN 1
\end_layout

\begin_layout Plain Layout

    ->         ELSE 0
\end_layout

\begin_layout Plain Layout

    ->       END) year_2002,
\end_layout

\begin_layout Plain Layout

    ->   SUM(CASE
\end_layout

\begin_layout Plain Layout

    ->         WHEN EXTRACT(YEAR FROM open_date) = 2003 THEN 1
\end_layout

\begin_layout Plain Layout

    ->         ELSE 0
\end_layout

\begin_layout Plain Layout

    ->       END) year_2003,
\end_layout

\begin_layout Plain Layout

    ->   SUM(CASE
\end_layout

\begin_layout Plain Layout

    ->         WHEN EXTRACT(YEAR FROM open_date) = 2004 THEN 1
\end_layout

\begin_layout Plain Layout

    ->         ELSE 0
\end_layout

\begin_layout Plain Layout

    ->       END) year_2004,
\end_layout

\begin_layout Plain Layout

    ->   SUM(CASE
\end_layout

\begin_layout Plain Layout

    ->         WHEN EXTRACT(YEAR FROM open_date) = 2005 THEN 1
\end_layout

\begin_layout Plain Layout

    ->         ELSE 0
\end_layout

\begin_layout Plain Layout

    ->       END) year_2005
\end_layout

\begin_layout Plain Layout

    -> FROM account
\end_layout

\begin_layout Plain Layout

    -> WHERE open_date > '1999-12-31' AND open_date < '2006-01-01';
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
plain
\end_layout

\end_inset


\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
CASE Expression Example
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\tiny}"
inline false
status open

\begin_layout Plain Layout

+-----------+-----------+-----------+-----------+-----------+-----------+
\end_layout

\begin_layout Plain Layout

| year_2000 | year_2001 | year_2002 | year_2003 | year_2004 | year_2005
 |
\end_layout

\begin_layout Plain Layout

+-----------+-----------+-----------+-----------+-----------+-----------+
\end_layout

\begin_layout Plain Layout

|         3 |         4 |         5 |         3 |         9 |         0
 |
\end_layout

\begin_layout Plain Layout

+-----------+-----------+-----------+-----------+-----------+-----------+
 
\end_layout

\begin_layout Plain Layout

1 row in set (0.01 sec)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Section
Set Operators
\end_layout

\begin_layout FragileFrame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
UNION Operator
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Description
UNION
\begin_inset space ~
\end_inset

operator
\begin_inset space ~
\end_inset

(
\begin_inset Formula $A\cup B$
\end_inset

): Addition of one result set to another result set with the same number
 of attributes and types.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "backgroundcolor={\color{lightgrey}}"
inline false
status open

\begin_layout Plain Layout

SELECT ...
 FROM ...
 
\end_layout

\begin_layout Plain Layout

UNION [ALL]
\end_layout

\begin_layout Plain Layout

SELECT ...
 FROM ...
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Just UNION removes duplicates, while UNION ALL keeps all rows from both
 result sets.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
plain
\end_layout

\end_inset


\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
UNION Operator Example
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\tiny}"
inline false
status open

\begin_layout Plain Layout

mysql> SELECT 'IND' type_cd, cust_id, lname name
\end_layout

\begin_layout Plain Layout

    -> FROM individual
\end_layout

\begin_layout Plain Layout

    -> UNION ALL
\end_layout

\begin_layout Plain Layout

    -> SELECT 'BUS' type_cd, cust_id, name
\end_layout

\begin_layout Plain Layout

    -> FROM business;
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\begin_inset listings
lstparams "basicstyle={\tiny}"
inline false
status open

\begin_layout Plain Layout

+---------+---------+------------------------+
\end_layout

\begin_layout Plain Layout

| type_cd | cust_id | name                   |
\end_layout

\begin_layout Plain Layout

+---------+---------+------------------------+
\end_layout

\begin_layout Plain Layout

| IND     |       1 | Hadley                 |
\end_layout

\begin_layout Plain Layout

| IND     |       2 | Tingley                | 
\end_layout

\begin_layout Plain Layout

| IND     |       3 | Tucker                 | 
\end_layout

\begin_layout Plain Layout

| IND     |       4 | Hayward                | 
\end_layout

\begin_layout Plain Layout

| IND     |       5 | Frasier                | 
\end_layout

\begin_layout Plain Layout

| IND     |       6 | Spencer                | 
\end_layout

\begin_layout Plain Layout

| IND     |       7 | Young                  | 
\end_layout

\begin_layout Plain Layout

| IND     |       8 | Blake                  | 
\end_layout

\begin_layout Plain Layout

| IND     |       9 | Farley                 | 
\end_layout

\begin_layout Plain Layout

| BUS     |      10 | Chilton Engineering    | 
\end_layout

\begin_layout Plain Layout

| BUS     |      11 | Northeast Cooling Inc.
 | 
\end_layout

\begin_layout Plain Layout

| BUS     |      12 | Superior Auto Body     | 
\end_layout

\begin_layout Plain Layout

| BUS     |      13 | AAA Insurance Inc.
     |
\end_layout

\begin_layout Plain Layout

+---------+---------+------------------------+
\end_layout

\begin_layout Plain Layout

13 rows in set (0.04 sec)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 2
status collapsed

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
INTERSECT Operator
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Description
INTERSECT
\begin_inset space ~
\end_inset

operator
\begin_inset space ~
\end_inset

(
\begin_inset Formula $A\cap B$
\end_inset

): Returns only tuples that are in common between two result sets.
 Result sets must be equal in number and type of attributes.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "backgroundcolor={\color{lightgrey}}"
inline false
status open

\begin_layout Plain Layout

SELECT ...
 FROM ...
\end_layout

\begin_layout Plain Layout

INTERSECT
\end_layout

\begin_layout Plain Layout

SELECT ...
 FROM ...
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
INTERSECT operator is 
\series bold
not
\series default
 implemented in MySQL
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
plain
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
INTERSECT Operator Example
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\tiny}"
inline false
status open

\begin_layout Plain Layout

SELECT emp_id, fname, lname
\end_layout

\begin_layout Plain Layout

FROM employee
\end_layout

\begin_layout Plain Layout

INTERSECT
\end_layout

\begin_layout Plain Layout

SELECT cust_id, fname, lname
\end_layout

\begin_layout Plain Layout

FROM individual;
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\begin_inset listings
lstparams "basicstyle={\tiny}"
inline false
status open

\begin_layout Plain Layout

Empty set (0.04 sec
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 2
status collapsed

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
EXCEPT Operator
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Description
EXCEPT
\begin_inset space ~
\end_inset

operator
\begin_inset space ~
\end_inset

(
\begin_inset Formula $A\backslash B$
\end_inset

): Returns the first result set minus anything it has in common with the
 second result set.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "backgroundcolor={\color{lightgrey}}"
inline false
status open

\begin_layout Plain Layout

SELECT ...
 FROM ...
\end_layout

\begin_layout Plain Layout

EXCEPT [ALL]
\end_layout

\begin_layout Plain Layout

SELECT ...
 FROM ...
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
EXCEPT operator is 
\series bold
not
\series default
 implemented in MySQL
\end_layout

\begin_layout Itemize
Oracle uses a non-ANSI-compliant 
\family typewriter
minus
\family default
 operator
\end_layout

\begin_layout Itemize
Just EXCEPT uses set theory version of minus.
 
\end_layout

\begin_deeper
\begin_layout Itemize
If 
\begin_inset Formula $B$
\end_inset

 has a row in common with 
\begin_inset Formula $A$
\end_inset

 then all rows matching that row is removed
\end_layout

\end_deeper
\begin_layout Itemize
The optional ALL uses the bag semantics version.
\end_layout

\begin_deeper
\begin_layout Itemize
If 
\begin_inset Formula $B$
\end_inset

 has a row in common with 
\begin_inset Formula $A$
\end_inset

 then only the number of common rows in 
\begin_inset Formula $B$
\end_inset

 rows matching that row is removed
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
plain
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
EXCEPT Operator Example
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\tiny}"
inline false
status open

\begin_layout Plain Layout

SELECT emp_id 
\end_layout

\begin_layout Plain Layout

FROM employee
\end_layout

\begin_layout Plain Layout

WHERE assigned_branch_id = 2
\end_layout

\begin_layout Plain Layout

  AND (title = 'Teller' OR title = 'Head Teller') 
\end_layout

\begin_layout Plain Layout

EXCEPT 
\end_layout

\begin_layout Plain Layout

SELECT DISTINCT open_emp_id 
\end_layout

\begin_layout Plain Layout

FROM account 
\end_layout

\begin_layout Plain Layout

WHERE open_branch_id = 2;
\end_layout

\end_inset


\end_layout

\begin_layout Pause
\begin_inset listings
lstparams "basicstyle={\tiny}"
inline false
status open

\begin_layout Plain Layout

+--------+ 
\end_layout

\begin_layout Plain Layout

| emp_id | 
\end_layout

\begin_layout Plain Layout

+--------+ 
\end_layout

\begin_layout Plain Layout

|     11 | 
\end_layout

\begin_layout Plain Layout

|     12 | 
\end_layout

\begin_layout Plain Layout

+--------+ 
\end_layout

\begin_layout Plain Layout

2 rows in set (0.01 sec)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Section
Functions and Operators
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Functions and Operators
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
There are too many functions in SQL and each implementation of SQL to list
 here.
 Here are some random functions in MySQL:
\end_layout

\begin_layout Description
CURRENT_TIMESTAMP() Returns the datetime of being executed.
\end_layout

\begin_layout Description
YEAR(d) Return the year for date d.
\end_layout

\begin_layout Description
MONTH(d) Return the month for date d.
\end_layout

\begin_layout Description
DAY(d) Return the day of the month for date d.
\end_layout

\begin_layout Description
DAYNAME(d) Return the name of the weekday of date d.
\end_layout

\begin_layout Description
FLOOR(n) Floor the numeric value n.
\end_layout

\begin_layout Description
CONCAT(str1,
\begin_inset space ~
\end_inset

str2,...) Concatenate the strings to one string.
\end_layout

\begin_layout Description
LOWER(s) Return the lower case version of the string s.
\end_layout

\begin_layout Description
LOG(n) Return the natural log of number n.
 
\end_layout

\begin_layout Description
CURTIME() Return the current time.
\end_layout

\begin_layout Description
RAND() Return a random floating-point number.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Section
Using SQL with R
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Using SQL within R
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
For SQL within R, we usually need two packages:
\end_layout

\begin_layout Enumerate

\series bold
DBI:
\series default
 R Database Interface
\end_layout

\begin_layout Enumerate
Specific package for the individual SQL implementation (MySQL, SQLite, Oracle,
 etc.).
\end_layout

\begin_layout Standard
RMySQL for MySQL
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
DBI Functions
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
DBI contains various virtual classes and functions in connecting and querying
 a database:
\end_layout

\begin_layout Description
dbDriver Driver specifying the operations for creating connections to SQL
 Servers
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "backgroundcolor={\color{lightgrey}}"
inline false
status open

\begin_layout Plain Layout

m = dbDriver("MySQL")
\end_layout

\begin_layout Plain Layout

# equivalent to MySQL()
\end_layout

\end_inset


\end_layout

\begin_layout Description
dbConnect Connect to a DBMS.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "backgroundcolor={\color{lightgrey}},breaklines=true"
inline false
status open

\begin_layout Plain Layout

conn = dbConnect(m, user="darrell", db="bank", host="localhost", password="pass"
)
\end_layout

\end_inset


\end_layout

\begin_layout Description
dbDisconnect Disconnect from a DBMS.
 You should always disconnect after you no longer need it
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "backgroundcolor={\color{lightgrey}},breaklines=true"
inline false
status open

\begin_layout Plain Layout

dbDisconnect(conn)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
DBI Functions
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Description
dbSendQuery Submits and executes SQL statement (information retrieved using
 fetch)
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "backgroundcolor={\color{lightgrey}},breaklines=true"
inline false
status open

\begin_layout Plain Layout

query = dbSendQuery(conn, "SELECT * FROM account;")
\end_layout

\end_inset


\end_layout

\begin_layout Description
dbGetQuery Submits, executes SQL statement and retrieves information
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "backgroundcolor={\color{lightgrey}},breaklines=true"
inline false
status open

\begin_layout Plain Layout

res = dbGetQuery(conn, "SELECT * FROM account;")
\end_layout

\end_inset


\end_layout

\begin_layout Description
fetch Get records from a dbSendQuery
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "backgroundcolor={\color{lightgrey}},breaklines=true"
inline false
status open

\begin_layout Plain Layout

max.num.row = 100
\end_layout

\begin_layout Plain Layout

res = fetch(query, n=max.num.row)
\end_layout

\end_inset


\end_layout

\begin_layout Description
dbListTables List tables in database connection
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "backgroundcolor={\color{lightgrey}},breaklines=true"
inline false
status open

\begin_layout Plain Layout

tables = dbListTables(conn)
\end_layout

\end_inset


\end_layout

\begin_layout Description
dbGetInfo Get meta-data for DBIObjects
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "backgroundcolor={\color{lightgrey}},breaklines=true"
inline false
status open

\begin_layout Plain Layout

meta.data = dbGetInfo(query)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
DBI Functions
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Description
dbReadTable Fetch the data from a table.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "backgroundcolor={\color{lightgrey}},breaklines=true"
inline false
status open

\begin_layout Plain Layout

res = dbReadTable(conn, "table")
\end_layout

\end_inset


\end_layout

\begin_layout Description
dbListFields Return the column names for a given table
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "backgroundcolor={\color{lightgrey}},breaklines=true"
inline false
status open

\begin_layout Plain Layout

columns = dbListFields(conn, "table")
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Connecting to Local FileSystem
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<ConnectingLocal, tidy=FALSE>>=
\end_layout

\begin_layout Plain Layout

library("RMySQL") 
\end_layout

\begin_layout Plain Layout

m = dbDriver("MySQL")
\end_layout

\begin_layout Plain Layout

conn = dbConnect(m, user="darrell", db="bank",
\end_layout

\begin_layout Plain Layout

				host="localhost",
\end_layout

\begin_layout Plain Layout

				password="pass")
\end_layout

\begin_layout Plain Layout

query = dbSendQuery(conn,
\end_layout

\begin_layout Plain Layout

                   "select *
\end_layout

\begin_layout Plain Layout

                   from account;")
\end_layout

\begin_layout Plain Layout

result = fetch(query)
\end_layout

\begin_layout Plain Layout

dbDisconnect(conn)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Connecting to Local FileSystem
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<ConnectingLocal2>>=
\end_layout

\begin_layout Plain Layout

head(result)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Connecting to Remote Server
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<Connectinghg19, tidy=FALSE>>=
\end_layout

\begin_layout Plain Layout

hg19 = dbConnect(MySQL(), user="genome", db="hg19", 
\end_layout

\begin_layout Plain Layout

	host="genome-mysql.cse.ucsc.edu")
\end_layout

\begin_layout Plain Layout

result = dbGetQuery(hg19, 
\end_layout

\begin_layout Plain Layout

		"SELECT COUNT(*) FROM affyU133Plus2")
\end_layout

\begin_layout Plain Layout

dbDisconnect(hg19)
\end_layout

\begin_layout Plain Layout

print(result)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Section
Thanks
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
References
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard

\series bold
\size larger
Books:
\end_layout

\begin_layout Standard
Learning SQL, Second Edition, by Alan Beaulieu.
 Copyright 2009 O’Reilly Media, Inc., 978-0-596-52083-0.
\end_layout

\begin_layout Itemize
Many code examples are borrowed from this book
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\series bold
\size larger
CS Database Courses:
\end_layout

\begin_layout Description
CS
\begin_inset space ~
\end_inset

338: Computer Applications in Business: Databases (CS Minors)
\end_layout

\begin_layout Description
CS
\begin_inset space ~
\end_inset

348: Introduction to Database Management (CS Majors)
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\series bold
\size larger
Coursera Courses:
\end_layout

\begin_layout Description
Introduction
\begin_inset space ~
\end_inset

to
\begin_inset space ~
\end_inset

Databases: by Jennifer Widom from Stanford
\end_layout

\begin_layout Description
Getting
\begin_inset space ~
\end_inset

and
\begin_inset space ~
\end_inset

Cleaning
\begin_inset space ~
\end_inset

Data: by Jeff Leek, PhD, Roger D.
 Peng, PhD, Brian Caffo, PhD from Johns Hopkins University
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Thanks
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Thanks to the Stats Club Execs for helping pull off this event and Grant
 Weddell for letting me listen in on his CS 348 Database class.
\end_layout

\begin_layout Standard

\series bold
\size large
Topics not mentioned
\series default
:
\end_layout

\begin_layout Itemize
Views
\end_layout

\begin_layout Itemize
Transactions
\end_layout

\begin_layout Itemize
How to setup a database: insert data, create constraints, indexes
\end_layout

\begin_deeper
\begin_layout Itemize
Application interfaces
\end_layout

\end_deeper
\begin_layout Itemize
How to import/export data: csv, tsv, XML, etc.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\end_body
\end_document
