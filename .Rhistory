Sys.setenv("HADOOP_STREAMING"="/usr/local/hadoop/2.5.2/share/hadoop/tools/lib/hadoop-streaming-2.5.2.jar")
library(rmr2)
library(data.table)
## map function
map <- function(k,lines) {
words.list <- strsplit(lines, ' ')
words <- unlist(words.list)
return( keyval(words, 1) )
}
## reduce function
reduce <- function(word, counts) {
keyval(word, sum(counts))
}
wordcount <- function (input, output=NULL) {
mapreduce(input=input, output=output, input.format="text",
map=map, reduce=reduce, combine=T)
}
# Copy file to input directory, if it's not there
if(system("${HADOOP_CMD} fs -test -e /user/darrellaucoin/input/War_and_Peace.txt")){
system("${HADOOP_CMD} fs -copyFromLocal ~/GitHub/IntroHadoop/War_and_Peace.txt /user/darrellaucoin/input")
}
## delete previous result if any
system("${HADOOP_CMD} fs -rm -r /user/darrellaucoin/out")
## Submit job
hdfs.root <-'/user/darrellaucoin'
hdfs.data <- file.path(hdfs.root, 'input')
hdfs.out <- file.path(hdfs.root, 'out')
out <- wordcount(hdfs.data, hdfs.out)
## Fetch results from HDFS
results <- from.dfs(out)
## check top 30 frequent words
results.df <- as.data.table(as.data.frame(results, stringsAsFactors=F) )
rm(results)
setnames(results.df, c('word', 'count'))
head(results.df[order(results.df$count, decreasing=T), ], 30)
results.df
mydata <- read.csv("http://www.ats.ucla.edu/stat/data/binary.csv")
mydata
?glm
model = glm(admit~gre+gpa+rank, family='binomial', data=mydata)
model
summary(model)
data <- read.csv("/Volumes/ASARHADI/BoxPlot/12.csv")
View(data)
data
str(data)
winter<-cbind(data$WRCP2.61, data$WRCP2.6, data$WRCP4.51, data$WRCP4.5, data$WRCP8.51, data$WRCP8.5)
spring<-cbind(data$SpRCP2.61, data$SpRCP2.6, data$SpRCP4.51, data$SpRCP4.5, data$SpRCP8.51, data$SpRCP8.5)
summer<-cbind(data$SRCP2.61, data$SRCP2.6, data$SRCP4.51, data$SRCP4.5, data$SRCP8.51, data$SRCP8.5)
fall<-cbind(data$FRCP2.61, data$FRCP2.6, data$FRCP4.51, data$FRCP4.5, data$FRCP8.51, data$FRCP8.5)
color<-c("chartreuse", "turquoise1","chartreuse", "turquoise1","chartreuse", "turquoise1","chartreuse", "turquoise1","chartreuse", "turquoise1","chartreuse", "turquoise1","chartreuse", "turquoise1","chartreuse", "turquoise1","chartreuse", "turquoise1","chartreuse", "turquoise1","chartreuse", "turquoise1","chartreuse", "turquoise1")
variables<-
boxplot(data$WRCP2.61, data$WRCP2.6, data$WRCP4.51, data$WRCP4.5, data$WRCP8.51,
data$WRCP8.5, data$SpRCP2.61, data$SpRCP2.6, data$SpRCP4.51, data$SpRCP4.5,
data$SpRCP8.51, data$SpRCP8.5, data$SRCP2.61, data$SRCP2.6, data$SRCP4.51,
data$SRCP4.5, data$SRCP8.51, data$SRCP8.5,data$FRCP2.61, data$FRCP2.6,
data$FRCP4.51, data$FRCP4.5, data$FRCP8.51, data$FRCP8.5, horizontal=TRUE,xlab="Precipitation (mm)", col=color)
?boxplot
boxplot(data)
boxplot(data,horizontal = FALSE)
boxplot(data,horizontal = TRUE)
data
boxplot(data[,1:2],horizontal = TRUE)
boxplot(data[,3:4],horizontal = TRUE,add=TRUE)
boxplot(count ~ spray, data = InsectSprays,
notch = TRUE, add = TRUE, col = "blue")
boxplot(data[,1:2],horizontal = TRUE,xlim=c(0,5))
boxplot(data[,1:2],horizontal = TRUE,xlim=c(-25,50))
boxplot(data[,1:2],horizontal = TRUE,ylim=c(-25,50))
par(frow=c(1,12))
?par
par(mfrow=c(1,12))
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE,xlab="Precipitation (mm)", col=color[1:2])
max(data)
max(data[,1])
data + 1
?max
max(data,na.rm=TRUE)
min(data,na.rm=TRUE)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE,xlab="Precipitation (mm)", col=color[1:2],ylim=c(min.value,max.value))
max.value=max(data,na.rm=TRUE)
min.value=min(data,na.rm=TRUE)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE,xlab="Precipitation (mm)", col=color[1:2],ylim=c(min.value,max.value))
par(mfrow=c(1,1))
max.value=max(data,na.rm=TRUE)
min.value=min(data,na.rm=TRUE)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE,xlab="Precipitation (mm)", col=color[1:2],ylim=c(min.value,max.value))
par(mfrow=c(1,6))
max.value=max(data,na.rm=TRUE)
min.value=min(data,na.rm=TRUE)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE,xlab="Precipitation (mm)", col=color[1:2],ylim=c(min.value,max.value))
par(mfrow=c(6,1))
max.value=max(data,na.rm=TRUE)
min.value=min(data,na.rm=TRUE)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE,xlab="Precipitation (mm)", col=color[1:2],ylim=c(min.value,max.value))
max.value=max(data,na.rm=TRUE)
min.value=min(data,na.rm=TRUE)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE,xlab="Precipitation (mm)", col=color[1:2],ylim=c(min.value,max.value))
max.value=max(data,na.rm=TRUE)
min.value=min(data,na.rm=TRUE)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE,xlab="Precipitation (mm)", col=color[1:2],ylim=c(min.value,max.value))
max.value=max(data,na.rm=TRUE)
min.value=min(data,na.rm=TRUE)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE,xlab="Precipitation (mm)", col=color[1:2],ylim=c(min.value,max.value))
max.value=max(data,na.rm=TRUE)
min.value=min(data,na.rm=TRUE)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE,xlab="Precipitation (mm)", col=color[1:2],ylim=c(min.value,max.value))
max.value=max(data,na.rm=TRUE)
min.value=min(data,na.rm=TRUE)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE,xlab="Precipitation (mm)", col=color[1:2],ylim=c(min.value,max.value))
par(mfrow=c(3,1))
max.value=max(data,na.rm=TRUE)
min.value=min(data,na.rm=TRUE)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE,xlab="Precipitation (mm)", col=color[1:2],ylim=c(min.value,max.value))
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value))
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value))
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value))
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value))
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value))
?boxplot
color<-c("chartreuse", "turquoise1","chartreuse", "turquoise1","chartreuse", "turquoise1","chartreuse", "turquoise1","chartreuse", "turquoise1","chartreuse", "turquoise1","chartreuse", "turquoise1","chartreuse", "turquoise1","chartreuse", "turquoise1","chartreuse", "turquoise1","chartreuse", "turquoise1","chartreuse", "turquoise1")
variables<-
boxplot(data$WRCP2.61, data$WRCP2.6, data$WRCP4.51, data$WRCP4.5, data$WRCP8.51,
data$WRCP8.5, data$SpRCP2.61, data$SpRCP2.6, data$SpRCP4.51, data$SpRCP4.5,
data$SpRCP8.51, data$SpRCP8.5, data$SRCP2.61, data$SRCP2.6, data$SRCP4.51,
data$SRCP4.5, data$SRCP8.51, data$SRCP8.5,data$FRCP2.61, data$FRCP2.6,
data$FRCP4.51, data$FRCP4.5, data$FRCP8.51, data$FRCP8.5, horizontal=TRUE,xlab="Precipitation (mm)", col=color)
?par
par(mfrow=c(12,1),mgp=0)
par(mfrow=c(12,1),mgp=0.1)
par(mfrow=c(12,1),mgp=c(0,0,0))
max.value=max(data,na.rm=TRUE)
min.value=min(data,na.rm=TRUE)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value))
par(mfrow=c(6,1),mgp=c(0,0,0))
max.value=max(data,na.rm=TRUE)
min.value=min(data,na.rm=TRUE)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value))
par(mfrow=c(4,1),mgp=c(0,0,0))
max.value=max(data,na.rm=TRUE)
min.value=min(data,na.rm=TRUE)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value))
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value))
par(mfrow=c(4,1),mai = c(1, 0.1, 0.1, 0.1))
max.value=max(data,na.rm=TRUE)
min.value=min(data,na.rm=TRUE)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value))
par(mfrow=c(4,1),mai = c(1, 0.1, 0.1, 0.1))
max.value=max(data,na.rm=TRUE)
min.value=min(data,na.rm=TRUE)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value))
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value))
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value))
par(mfrow=c(4,1),mai = c(0.1, 0.1, 0.1, 0.1))
max.value=max(data,na.rm=TRUE)
min.value=min(data,na.rm=TRUE)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value))
max.value=max(data,na.rm=TRUE)
min.value=min(data,na.rm=TRUE)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value))
max.value=max(data,na.rm=TRUE)
min.value=min(data,na.rm=TRUE)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value))
max.value=max(data,na.rm=TRUE)
min.value=min(data,na.rm=TRUE)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value))
par(mfrow=c(4,1),mai = c(0.01, 0.1, 0.1, 0.1))
max.value=max(data,na.rm=TRUE)
min.value=min(data,na.rm=TRUE)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value))
par(mfrow=c(4,1),mai = c(0.01, 0.1, 0.1, 0.1))
max.value=max(data,na.rm=TRUE)
min.value=min(data,na.rm=TRUE)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value))
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value))
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value))
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value))
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),axes=FALSE)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxes=FALSE)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),yaxes=FALSE)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),yaxes=FALSE)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),yaxes=FALSE)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxes=FALSE)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),axes=FALSE)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n")
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n")
w=c(3,1),mai = c(0.01, 0.1, 0.1, 0.1))
max.value=max(data,na.rm=TRUE)
min.value=min(data,na.rm=TRUE)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n")
par(mfrow=c(3,1),mai = c(0.01, 0.1, 0.1, 0.1))
max.value=max(data,na.rm=TRUE)
min.value=min(data,na.rm=TRUE)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n")
par(mfrow=c(5,1),mai = c(0.01, 0.1, 0.1, 0.1))
max.value=max(data,na.rm=TRUE)
min.value=min(data,na.rm=TRUE)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n")
par(mfrow=c(7,1),mai = c(0.01, 0.1, 0.1, 0.1))
max.value=max(data,na.rm=TRUE)
min.value=min(data,na.rm=TRUE)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n")
par(mfrow=c(10,1),mai = c(0.01, 0.1, 0.1, 0.1))
max.value=max(data,na.rm=TRUE)
min.value=min(data,na.rm=TRUE)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n")
par(mfrow=c(12,1),mai = c(0.01, 0.1, 0.1, 0.1))
max.value=max(data,na.rm=TRUE)
min.value=min(data,na.rm=TRUE)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n")
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n")
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n")
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n")
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n")
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n")
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n")
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n")
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n")
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n")
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n")
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n")
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n",boxlwd = 1)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n",boxlwd = 0.5)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n",boxlwd = 12)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n",boxlwd = 0)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n",boxlwd = 1)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n",width=1)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n",width=c(1,1))
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n",width=c(1,1))
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n",width=c(0.2,0.2))
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n",width=c(0.002,0.002))
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n",width=c(20,0.002))
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n",width=c(10,10))
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n",width=c(10,10))
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n",width=c(1,10))
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n",varwidth=TRUE)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n",varwidth=TRUE)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n",boxwex=0.4)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n",boxwex=0.4)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n",boxwex=0.2)
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n",boxwex=0.2)
legend(x=0,y=0,legend = 'sdf')
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n",boxwex=0.2)
legend(x=0,y=0,legend = 'sdf')
legend(x=25,y=25,legend = 'sdf')
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n",boxwex=0.2)
legend(x=25,y=25,legend = 'sdf')
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n",boxwex=0.2)
legend(x=25,y=25,legend = 'sdf')
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n",boxwex=0.2)
legend(x=25,y=25,legend = 'sdf')
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n",boxwex=0.2)
legend(x=25,y=25,legend = 'sdf')
?legend
legend( 'sdf')
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n",boxwex=0.2)
legend('sdf')
legend(x=0,'sdf')
legend(x=25,'sdf')
legend(x=1,'sdf')
legend(x=2,'sdf')
legend(x=2.5,'sdf')
legend(x=2.5,Y=0,'sdf')
legend(x=2.5,Y=0.5,'sdf')
legend(x=2.5,y=0.5,'sdf')
legend(x=2.5,y=0,'sdf')
legend(x=2.5,y=2,'sdf')
legend(x=2.5,y=-2,'sdf')
legend(x=2.5,y=-1,'sdf')
legend(x=2.5,y=0,'sdf')
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n",boxwex=0.2)
legend(x=2.5,y=0,'sdf')
legend(x=2.5,y=-0.5,'sdf')
legend(x=2.5,'sdf')
legend(x=2.5,y=25,'sdf')
legend(x=2.5,y=25,'sdf')
legend(x=2.5,y=min.value,'sdf')
min.value
legend(x=2.5,y=1,'sdf')
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n",boxwex=0.2)
legend(x=2.5,y=1,'sdf')
legend(x=2.5,'sdf')
legend(x=2.5,y=0,'sdf')
legend(x=2.5,y=1,'sdf')
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n",boxwex=0.2)
legend(x=2.5,y=1,'sdf')
legend(x=2.5,'sdf')
legend(x=2.25,'sdf')
legend(x=2.5,'sdf')
legend(x=2.5,y=1,'sdf')
legend(x=2.5,y=1,'sdf')
boxplot(data$WRCP2.61, data$WRCP2.6, horizontal=TRUE, col=color[1:2],ylim=c(min.value,max.value),xaxt="n",boxwex=0.2)
legend(x=2.5,y=1,'sdf')
legend(x=5,y=-1,'sdf')
legend(x=5,y=-1,legend=c('sdf','dsf'), col = c('red', 'green'))
legend(x=2.5,legend=c('sdf','dsf'), col = c('red', 'green'))
?lengend
?legend
legend(x=2.5,legend=c('sdf','dsf'), col = c('red', 'green'),lwd='l')
legend(x=2.5,legend=c('sdf','dsf'), col = c('red', 'green'),lwd='l')
legend(x=2.5,legend=c('sdf','dsf'), col = c('red', 'green'),lwd='l')
legend(x=2.5,legend=c('sdf','dsf'), col = c('red', 'green'),lty='l')
legend(x=2.5,legend=c('sdf','dsf'), col = c('red', 'green'),lwd='l')
legend(x=2.5,legend=c('sdf','dsf'), col = c(1, 2),lwd='l')
install.packages("SparkR")
install.packages("testthat")
library(devtools)
install_github("amplab-extras/SparkR-pkg", subdir="pkg")
?t.test
mobile_table <- read.table("/Volumes/DAR32GB/mobile_table6.txt", quote="\"")
View(mobile_table)
mobile_table
desktop_table <- read.table("/Volumes/DAR32GB/desktop_table6.txt", quote="\"")
View(desktop_table)
View(desktop_table)
desktop_table
t.test(x=mobile_table[1],y=desktop_table[1])
desktop_table6 <- read.table("/Volumes/DAR32GB/desktop_table6.txt", quote="\"")
View(desktop_table6)
mobile_table5 <- read.table("/Volumes/DAR32GB/mobile_table5.txt", quote="\"")
View(mobile_table5)
mobile_table5 <- read.table("/Volumes/DAR32GB/mobile_table5.txt", quote="\"")
View(mobile_table5)
desktop_table5 <- read.table("/Volumes/DAR32GB/desktop_table5.txt", quote="\"")
View(desktop_table5)
t.test(x=mobile_table5[1],y=desktop_table5[1])
Sys.setenv("HADOOP_PREFIX"="/usr/local/hadoop/2.5.2")
Sys.setenv("HADOOP_CMD"="/usr/local/hadoop/2.5.2/bin/hadoop")
Sys.setenv("HADOOP_STREAMING"="/usr/local/hadoop/2.5.2/share/hadoop/tools/lib/hadoop-streaming-2.5.2.jar")
library(rmr2)
library(data.table)
## map function
map <- function(k,lines) {
words.list <- strsplit(lines, ' ')
words <- unlist(words.list)
return( keyval(words, 1) )
}
## reduce function
reduce <- function(word, counts) {
keyval(word, sum(counts))
}
wordcount <- function (input, output=NULL) {
mapreduce(input=input, output=output, input.format="text",
map=map, reduce=reduce, combine=T)
}
# Copy file to input directory, if it's not there
if(system("${HADOOP_CMD} fs -test -e /user/darrellaucoin/input/War_and_Peace.txt")){
system("${HADOOP_CMD} fs -copyFromLocal ~/GitHub/IntroHadoop/War_and_Peace.txt /user/darrellaucoin/input")
}
## delete previous result if any
system("${HADOOP_CMD} fs -rm -r /user/darrellaucoin/out")
## Submit job
hdfs.root <-'/user/darrellaucoin'
hdfs.data <- file.path(hdfs.root, 'input')
hdfs.out <- file.path(hdfs.root, 'out')
out <- wordcount(hdfs.data, hdfs.out)
## Fetch results from HDFS
results <- from.dfs(out)
## check top 30 frequent words
results.df <- as.data.table(as.data.frame(results, stringsAsFactors=F) )
rm(results)
setnames(results.df, c('word', 'count'))
head(results.df[order(results.df$count, decreasing=T), ], 30)
results.df
?anova
anova <- read.csv("~/Documents/anova.csv", header=FALSE)
View(anova)
anova=anova[2:6,1:5]
anova
View(anova)
View(anova)
anova <- read.csv("~/Documents/anova.csv")
View(anova)
anova=anova[1:6,1:5]
anova
anova(anova)
?anova-class
View(anova)
fit <- aov(target ~ X1 + X2 + X3 + X4, data=anova)
fit
fit <- aov(target ~ X1 * X2 * X3 * X4, data=anova)
fit
fit <- aov(target ~ X1 + X2 + X3 + X4, data=anova)
fit
summary(fit)
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
swirl()
swirl()
Oneway.test(anova$X1 ~ anova$X2 )
fit <- aov(target ~ X1, data=anova)
fit
summary(fit)
fit <- aov(X2 ~ X1, data=anova)
summary(fit)
boxplot(anova)
var(anova)
summary(fit)
detach("package:swirl", unload=TRUE)
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
swirl()
swirl()
swirl()
library("RSQLite", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
```r
data(USArrests)
USArrests
library(RSQLite)
con = dbConnect(SQLite())
dbDisconnect(con)
?dbConnect,SQLiteConnection-method
?dbConnect
library(RSQLite)
m = dbDriver("SQLite")
con = dbConnect(m, "stats_club.db")
dbDisconnect(con)
library(RSQLite)
m = dbDriver("SQLite")
con = dbConnect(m, "stats_club.db")
query = dbSendQuery(con,
"select *
from exec;")
result = fetch(query)
print(result)
dbDisconnect(con)
library(RSQLite)
m = dbDriver("SQLite")
con = dbConnect(m, "stats_club.db")
query = dbSendQuery(con,
"select *
from exec;")
result = fetch(query)
result
dbDisconnect(con)
library(RSQLite)
m = dbDriver("SQLite")
con = dbConnect(m, "stats_club.db")
query = dbSendQuery(con,
"select *
from member;")
result = fetch(query)
result
dbDisconnect(con)
library(RSQLite)
setwd('/Users/darrellaucoin/GitHub/IntroSQL')
m = dbDriver("SQLite")
con = dbConnect(m, "stats_club.db")
query = dbSendQuery(con,
"select *
from member;")
result = fetch(query)
result
dbDisconnect(con)
library(RSQLite)
setwd('/Users/darrellaucoin/GitHub/IntroSQL')
m = dbDriver("SQLite")
con = dbConnect(m, "stats_club.db")
query = dbSendQuery(con,
"select *
from exec;")
result = fetch(query)
result
dbDisconnect(con)
result
library(RSQLite)
#setwd('/Users/darrellaucoin/GitHub/IntroSQL')
m = dbDriver("/Users/darrellaucoin/GitHub/IntroSQLSQLite")
con = dbConnect(m, "stats_club.db")
query = dbSendQuery(con,
"select *
from exec;")
result = fetch(query)
result
dbDisconnect(con)
library(RSQLite)
setwd('/Users/darrellaucoin/GitHub/IntroSQL')
m = dbDriver("SQLite")
con = dbConnect(m, "/Users/darrellaucoin/GitHub/IntroSQL/stats_club.db")
query = dbSendQuery(con,
"select *
from exec;")
result = fetch(query)
result
dbDisconnect(con)
library(RSQLite)
m = dbDriver("SQLite")
con = dbConnect(m, "/Users/darrellaucoin/GitHub/IntroSQL/stats_club.db")
query = dbSendQuery(con,
"SELECT *
FROM exec;")
result = fetch(query)
result
dbClearResult(result)
dbDisconnect(con)
library(RSQLite)
m = dbDriver("SQLite")
con = dbConnect(m, "/Users/darrellaucoin/GitHub/IntroSQL/stats_club.db")
query = dbSendQuery(con,
"SELECT *
FROM exec;")
result = fetch(query)
result
dbClearResult(query)
dbDisconnect(con)
library(RSQLite)
m = dbDriver("SQLite")
con = dbConnect(m, "/Users/darrellaucoin/GitHub/IntroSQL/stats_club.db")
result = dbGetQuery(con,
"SELECT *
FROM event;")
dbDisconnect(con)
?dbClearResult
install.packages("RSQLite")
